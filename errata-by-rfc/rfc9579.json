[
  {
    "errata_id": "7974",
    "doc-id": "RFC9579",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "6",
    "orig_text": "   As documented in Appendix B.1 of [RFC7292], the handling of password\r\n   encoding in the underlying standards is underspecified.  However,\r\n   just as with PBES1 and PBES2 when used in the context of PKCS #12\r\n   objects, all passwords used with PBMAC1 MUST be created from\r\n   BMPStrings with a NULL terminator.",
    "correct_text": "   As documented in Appendix B.1 of [RFC7292], the handling of password\r\n   encoding in the underlying standards is underspecified.  However,\r\n   unlike with PBES1 and PBES2 when used in the context of PKCS #12\r\n   objects, all passwords used with PBMAC1 MUST be created from\r\n   UTF-8 encoding without a NULL terminator or Byte Order Mark (BOM).",
    "notes": "Turns out that in the implementation we used for creating the test vectors, the conversion between the user-provided password and the BMPStrings used for encryption happened in a different place in the call stack than we expected, and the way we generated them, the passwords stayed in UTF-8 format instead of being converted to big-endian UTF-16.\r\n\r\nGiven that we already have the UTF-8 code implemented in GnuTLS (https://gitlab.com/gnutls/gnutls/-/merge_requests/1833), NSS (https://phabricator.services.mozilla.com/D201833), and that the test-vectors are self-consistent otherwise, I think it will be easier to just redefine how the passwords are passed in to the KDF in the PBMAC1 than to change all the implementations and test vectors.\r\n\r\nThanks space88man on github for noticing this: https://github.com/openssl/openssl/issues/24546#issuecomment-2154729339",
    "submit_date": "2024-06-07",
    "submitter_name": "Hubert Kario",
    "verifier_id": "179",
    "verifier_name": "Deb Cooley",
    "update_date": "2025-04-03 10:44:05"
  }
]

[
  {
    "errata_id": "7925",
    "doc-id": "RFC9497",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "4.3",
    "orig_text": "HashToScalar():  Use hash_to_field from [RFC9380] using L = 48,\r\n         expand_message_xmd with SHA-256, DST = \"HashToScalar-\" ||\r\n         contextString, and a prime modulus equal to Group.Order().",
    "correct_text": "HashToScalar():  Compute uniform_bytes using expand_message =\r\n         expand_message_xmd, DST = \"HashToScalar-\" || contextString, and\r\n         an output length of 48 bytes, interpret uniform_bytes as a\r\n         384-bit integer in little-endian order, and reduce the integer\r\n         modulo Group.Order().",
    "notes": "It is incorrect to refer to the hash_to_filed operation of RFC 9380 because the implementation of hash_to_field, as described in section 5.2 of RFC 9380 reduces the result integer mod Field order (not Group order).\r\n\r\n 7.     e_j = OS2IP(tv) mod p\r\n\r\nWhere p is the characteristic of field F.\r\n\r\nThe current text imply that the existing hash_to_field implementation for P-256 can be used. But using this will cause a false result due to the mod field order operation.\r\n\r\nThe a better, and accurate way to describe this is by using the same explanation as for other curve types and specify the use of expand_message_xmd directly modulus Group.Order().\n --VERIFIER NOTES-- \nDiscussed on CFRG list. The original text is correct, see https://mailarchive.ietf.org/arch/msg/cfrg/YLqRy76LFlVzeOofGyQiYeDhAuM/",
    "submit_date": "2024-05-07",
    "submitter_name": "Stefan Santesson",
    "verifier_id": "163",
    "verifier_name": "Colin Perkins",
    "update_date": "2024-05-20 15:51:25"
  },
  {
    "errata_id": "7999",
    "doc-id": "RFC9497",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "3.3.3",
    "orig_text": "evaluatedElement = G.ScalarInverse(t) * blindedElement\r\n",
    "correct_text": "evaluatedElement = t * blindedElement\r\n",
    "notes": "This appears in def BlindEvaluate(skS, blindedElement, info). It seems that the evaluatedElement=t * blindedElement, which is consistent with tweakedKey = t * G.Generator()\r\n\r\n\r\nVerified on CFRG list by co-author with note: I would also change \"0\" to \"seq = 0\"\r\n",
    "submit_date": "2024-06-24",
    "submitter_name": "Quanwei Cai",
    "verifier_id": "182",
    "verifier_name": "Nick Sullivan",
    "update_date": "2025-01-18 10:48:19"
  },
  {
    "errata_id": "8392",
    "doc-id": "RFC9497",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "4",
    "orig_text": "RandomScalar():  Implemented by returning a uniformly random\r\n         Scalar in the range [0, G.Order() - 1].",
    "correct_text": "RandomScalar():  Implemented by returning a uniformly random\r\n         Scalar in the range [1, G.Order() - 1].",
    "notes": "Section 2.1 (https://www.rfc-editor.org/rfc/rfc9497#section-2.1-4.12) states:\r\n> Chooses at random a nonzero element in GF(p).\r\n\r\nSo `RandomScalar()` implementations can't return 0.",
    "submit_date": "2025-04-25",
    "submitter_name": "daxpedda",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  },
  {
    "errata_id": "8393",
    "doc-id": "RFC9497",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "4.7",
    "orig_text": "4.7.1.  Rejection Sampling\r\n\r\n   Generate a random byte array with Ns bytes and attempt to map to a\r\n   Scalar by calling DeserializeScalar in constant time.\r\n   ...\r\n\r\n4.7.2.  Random Number Generation Using Extra Random Bits\r\n\r\n   Generate a random byte array with L = ceil(((3 *\r\n   ceil(log2(G.Order()))) / 2) / 8) bytes, and interpret it as an\r\n   integer; reduce the integer modulo G.Order(), and return the result.",
    "correct_text": "4.7.1.  Rejection Sampling\r\n\r\n   Generate a random byte array with Ns bytes and attempt to map to a\r\n   Scalar by calling DeserializeScalar and checking for a nonzero Scalar\r\n   in constant time.\r\n   ...\r\n\r\n4.7.2.  Random Number Generation Using Extra Random Bits\r\n\r\n   Generate a random byte array with L = ceil(((3 *\r\n   ceil(log2(G.Order()))) / 2) / 8) bytes, and interpret it as an\r\n   integer; reduce the integer modulo G.Order() - 1, 1, and return the\r\n   result.",
    "notes": "Section 2.1 (https://www.rfc-editor.org/rfc/rfc9497#section-2.1-4.12) states:\r\n> Chooses at random a nonzero element in GF(p).\r\n\r\nSo `RandomScalar()` implementations can't return 0.\r\n\r\nFor rejection sampling I actually recommend changing `DeserializeScalar()` instead to check for nonzero Scalar and decline those. My suggested errata is just a compromise to keep the change as specific as possible. Changing `DeserializeScalar()` might need a separate discussion, but I will await feedback for that.\r\n\r\nFor \"Random Number Generation Using Extra Random Bits\" my suggestion is to follow FIPS 186-5 A.2.1 (https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf#%5B%7B%22num%22%3A154%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C70%2C586%2C0%5D), which is described in my errata. I found no standard referring to Ristretto255, but the one provided by FIPS for ECDSA works as well here.",
    "submit_date": "2025-04-25",
    "submitter_name": "daxpedda",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  }
]

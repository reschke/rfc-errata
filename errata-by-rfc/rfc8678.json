[
  {
    "errata_id": "8002",
    "doc-id": "RFC8678",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "6.2.3",
    "orig_text": "   In this example, we could arrange things so that SERb1 drops the\r\n   packet with S=2001:db8:0:b010::31 and D=2001:db8:0:1234::101, and\r\n   then sends to H31 an ICMPv6 Destination Unreachable message with Code\r\n   5 (Source address failed ingress/egress policy).  When H31 receives\r\n   this packet, it would then be expected to try another source address\r\n   to reach the destination.  In this example, H31 would then send a\r\n   packet with S=2001:db8:0:a010::31 and D=2001:db8:0:1234::101, which\r\n   will reach SERa and be forwarded out the uplink to ISP-A.\r\n\r\n",
    "correct_text": "   In this example, we could arrange things so that SERb1 drops the\r\n   packet with S=2001:db8:0:b010::31 and D=2001:db8:0:1234::101, and\r\n   then sends to H31 an ICMPv6 Destination Unreachable message with Code\r\n   5 (Source address failed ingress/egress policy).  When H31 receives\r\n   this packet, an application running on it could then try another\r\n   source address to reach the destination if it was specifically\r\n   programmed to do so.  In this example, H31 would then send a packet\r\n   with S=2001:db8:0:a010::31 and D=2001:db8:0:1234::101, which will\r\n   reach SERa and be forwarded out the uplink to ISP-A.",
    "notes": "The approach with ICMPv6 Destination Unreachable message with Code 5 (Source address failed ingress/egress policy) is, in fact, unsound, as it is possible to force the OS kernel to perform an (uninformed) address selection using the standard socket API without sending any packets and thus without giving any router a chance to react with ICMPv6 Destination Unreachable messages. For example, consider the following Python code:\r\n\r\nimport socket\r\ns = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\ns.connect((\"2001:4860:4860::8888\", 53))   # no packets are sent, this is a datagram socket\r\nmy_addr = s.getsockname()\r\n\r\nAt this point, one can print my_addr; therefore, it's too late to change behind the scenes the decision on the source address that was made in the second line if it happens to be incorrect. So, it's crucial that the source address selection can happen without any post-factum feedback, which leaves router advertisements with the effective routing policy as the only viable mechanism for controlling source address selection.\r\n\r\nPerhaps this mandatory requirement for an application (not an operating system!) to handle ICMPv6 Destination Unreachable messages with Code 5 explicitly (that is, in practice, not implemented) could also be added as a drawback to section 6.2.4 and mentioned in section 6.3.4 instead of referring to the unclear understanding of the host operating system behavior.\r\n\r\n----\r\nVerifier note: see also https://mailarchive.ietf.org/arch/msg/rtgwg/2G3oA5PPsnCAnRqSFuevxTlMQcY/",
    "submit_date": "2024-06-25",
    "submitter_name": "Alexander Patrakov",
    "verifier_id": "171",
    "verifier_name": "John Scudder",
    "update_date": "2025-03-10 11:37:58"
  },
  {
    "errata_id": "8124",
    "doc-id": "RFC8678",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "6.3.2",
    "orig_text": "Let's consider a scenario in which all uplinks are operational, and\r\nH41 receives two different RAs from R3: one from LLA_A with a PIO for\r\n2001:db8:0:a020::/64 and the default router preference set to 11\r\n(low), and another one from LLA_B with a PIO for\r\n2001:db8:0:a020::/64, the default router preference set to 01 (high),\r\nand a RIO for 2001:db8:0:6666::/64.  As a result, H41 uses\r\n",
    "correct_text": "Let's consider a scenario in which all uplinks are operational, and\r\nH41 receives two different RAs from R3: one from LLA_A with a PIO for\r\n2001:db8:0:a020::/64 and the default router preference set to 11\r\n(low), and another one from LLA_B with a PIO for\r\n2001:db8:0:b020::/64, the default router preference set to 01 (high),\r\nand a RIO for 2001:db8:0:6666::/64.  As a result, H41 uses\r\n",
    "notes": "Minor technical fix to paragraph 2, 1st sentence: PIO of 2001:db8:0:a020::/64 is used for both LLA_A and LLA_B.  Based on the remaining contents of the paragraph, the PIO of LLA_B should be 2001:db8:0:b020::/64.",
    "submit_date": "2024-09-28",
    "submitter_name": "Scott Shambarger",
    "verifier_id": "175",
    "verifier_name": "Jim Guichard",
    "update_date": "2024-10-09 08:13:30"
  }
]

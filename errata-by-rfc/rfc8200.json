[
  {
    "errata_id": "5170",
    "doc-id": "RFC8200",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "4.5",
    "orig_text": "              A Fragment Offset containing the offset of the fragment,\r\n              in 8-octet units, relative to the start of the\r\n              Fragmentable Part of the original packet.  The Fragment\r\n              Offset of the first (\"leftmost\") fragment is 0.",
    "correct_text": "              A Fragment Offset containing the offset of the fragment,\r\n              in 8-octet units, relative to the start of the\r\n              \"Extension & Upper-Layer Headers\" Part of the original \r\n              packet. The Fragment Offset of the fragment containing\r\n              the \"Extension & Upper-Layer Headers\" part is 0.",
    "notes": "Clearly, the first fragment will contain a Fragment Offset of 0.\r\n\r\nHowever, given the figure:\r\n\r\n---- cut here ----\r\n   original packet:\r\n\r\n   +-----------------+-----------------+--------+--------+-//-+--------+\r\n   |  Per-Fragment   |Ext & Upper-Layer|  first | second |    |  last  |\r\n   |    Headers      |    Headers      |fragment|fragment|....|fragment|\r\n   +-----------------+-----------------+--------+--------+-//-+--------+\r\n\r\n   fragment packets:\r\n\r\n   +------------------+---------+-------------------+----------+\r\n   |  Per-Fragment    |Fragment | Ext & Upper-Layer |  first   |\r\n   |    Headers       | Header  |   Headers         | fragment |\r\n   +------------------+---------+-------------------+----------+\r\n\r\n   +------------------+--------+-------------------------------+\r\n   |  Per-Fragment    |Fragment|    second                     |\r\n   |    Headers       | Header |   fragment                    |\r\n   +------------------+--------+-------------------------------+\r\n                         o\r\n                         o\r\n                         o\r\n   +------------------+--------+----------+\r\n   |  Per-Fragment    |Fragment|   last   |\r\n   |    Headers       | Header | fragment |\r\n   +------------------+--------+----------+\r\n\r\n\r\nit is the part market as \"Ext & Upper-Layer Headers\" the one that will have a Fragment offset of 0, rather than the part marked as \"first fragment\". For example, one could envision this scenario:\r\n\r\n---- cut here ----\r\n   original packet:\r\n\r\n   +-----------------+-----------------+---------------+\r\n   |  Per-Fragment   |Ext & Upper-Layer| first & last  |\r\n   |    Headers      |    Headers      |   fragment    |\r\n   +-----------------+-----------------+---------------+\r\n\r\n   fragment packets:\r\n\r\n   +------------------+---------+-------------------+\r\n   |  Per-Fragment    |Fragment | Ext & Upper-Layer |\r\n   |    Headers       | Header  |   Headers         |\r\n   +------------------+---------+-------------------+\r\n\r\n   +------------------+--------+---------------+\r\n   |  Per-Fragment    |Fragment| first & last  |\r\n   |    Headers       | Header |   fragment    |\r\n   +------------------+--------+---------------+\r\n\r\n---- cut here ----\r\n\r\nWhere the first fragment just contains the entire IPv6 header chain, and then second fragment contains the chunk marked as \"first fragment\" (this \"first fragment\" part is the only \"Fragmentable\" part of the packet).\r\n\r\nNote: the text \"The Fragment Offset of the first (\"leftmost\") fragment is 0.\" was re-phrased in the \"corrected text\", since it might confuse the reader regarding whether it refers to the actual first fragment (i.e. the first packet corresponding to the fragmented datagram), or the chunk marked as \"first fragment\" in the figure.\n --VERIFIER NOTES-- \nVerifier's Note by Suresh Krishnan (Responsible AD for 6man): The 6man working group has chosen to address the subject of this Erratum and other related Errata using a consolidated fix detailed in the Erratum report #5945. I would like to thank the submitter Fernando Gont for bringing this up. ",
    "submit_date": "2017-10-28",
    "submitter_name": "Fernando Gont",
    "verifier_id": "152",
    "verifier_name": "Suresh Krishnan",
    "update_date": "2020-02-03 06:14:55"
  },
  {
    "errata_id": "5171",
    "doc-id": "RFC8200",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "4.5",
    "orig_text": "   The subsequent fragment packets are composed of:\r\n\r\n      (1)  The Per-Fragment headers of the original packet, with the\r\n           Payload Length of the original IPv6 header changed to contain\r\n           the length of this fragment packet only (excluding the length\r\n           of the IPv6 header itself), and the Next Header field of the\r\n           last header of the Per-Fragment headers changed to 44.\r\n\r\n      (2)  A Fragment header containing:\r\n\r\n              The Next Header value that identifies the first header\r\n              after the Per-Fragment headers of the original packet.\r\n\r\n              A Fragment Offset containing the offset of the fragment,\r\n              in 8-octet units, relative to the start of the\r\n              Fragmentable Part of the original packet.",
    "correct_text": "   The subsequent fragment packets are composed of:\r\n\r\n      (1)  The Per-Fragment headers of the original packet, with the\r\n           Payload Length of the original IPv6 header changed to contain\r\n           the length of this fragment packet only (excluding the length\r\n           of the IPv6 header itself), and the Next Header field of the\r\n           last header of the Per-Fragment headers changed to 44.\r\n\r\n      (2)  A Fragment header containing:\r\n\r\n              The Next Header value that identifies the first header\r\n              after the Per-Fragment headers of the original packet.\r\n\r\n              A Fragment Offset containing the offset of the fragment,\r\n              in 8-octet units, relative to the start of the\r\n              \"Extension & Upper-Layer Headers\" part of the original\r\n              packet.",
    "notes": "This complements this errata:\r\n\r\nReported By: Fernando Gont\r\nDate Reported: 2017-10-28\n --VERIFIER NOTES-- \nVerifier's Note by Suresh Krishnan (Responsible AD for 6man): The 6man working group has chosen to address the subject of this Erratum and other related Errata using a consolidated fix detailed in the Erratum report #5945. I would like to thank the submitter Fernando Gont for bringing this up. ",
    "submit_date": "2017-10-29",
    "submitter_name": "Fernando Gont",
    "verifier_id": "152",
    "verifier_name": "Suresh Krishnan",
    "update_date": "2020-02-03 06:15:26"
  },
  {
    "errata_id": "5172",
    "doc-id": "RFC8200",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "4.5",
    "orig_text": "         The Fragmentable Part of the reassembled packet is constructed\r\n         from the fragments following the Fragment headers in each of\r\n         the fragment packets.  The length of each fragment is computed\r\n         by subtracting from the packet's Payload Length the length of\r\n         the headers between the IPv6 header and fragment itself; its\r\n         relative position in Fragmentable Part is computed from its\r\n         Fragment Offset value.",
    "correct_text": "         The \"Ext & Upper-Layer Headers\" part and Fragmentable Part of \r\n         the reassembled packet are constructed from the \"chunks\" \r\n         following the Fragment headers in each of the fragment packets.\r\n         The length of each chunk is computed by subtracting from the \r\n         packet's Payload Length the length of the headers between the\r\n         IPv6 header and chunk itself; the relative position of the \r\n         chunk is computed from its Fragment Offset value.",
    "notes": "* The original text misses how to construct the \"Ext & Upper-Layer Headers\" of the packet, which in the figures is not considered to be part of the \"Unfragmentable part\" (it *was* considered part of it in RFC2460).\r\n\r\n* The original text does says:\r\n         The length of each fragment is computed\r\n         by subtracting from the packet's Payload Length the length of\r\n         the headers between the IPv6 header and fragment itself\r\n\r\nAssuming \"each fragment\" refers to the pieces marked as \"first fragment\", \"second fragment\", etc., this does not apply for the computation of the length of the first fragment, since such computed length would otherwise include the length of the first fragment, plus the length of \"Ext & Upper-Layer Headers\".\r\n\r\n* The \"corrected text\" requires more work, and employs the (previously undefined) term \"chunk\" to refer to the content of a fragment (the chunk following a Fragment Header in a given packet). This is because for all fragments other than the first, \"fragment\" is what follows an FH, but for the first fragment (given the figures), \"first fragment\" is NOT everything that follows the FH (i.e., it does not include the \"Ext & Upper-Layer Headers\" part.\r\n\r\n* Note that in the corrected text, the phrase \"its relative position in Fragmentable Part is computed from its Fragment Offset value\", since the relative position is really from the \"Ext & Upper-Layer Headers\" part, rather than from the Unfragmentable part.\n --VERIFIER NOTES-- \nVerifier's Note by Suresh Krishnan (Responsible AD for 6man): The 6man working group has chosen to address the subject of this Erratum and other related Errata using a consolidated fix detailed in the Erratum report #5945. I would like to thank the submitter Fernando Gont for bringing this up. ",
    "submit_date": "2017-10-29",
    "submitter_name": "Fernando Gont",
    "verifier_id": "152",
    "verifier_name": "Suresh Krishnan",
    "update_date": "2020-02-03 06:15:55"
  },
  {
    "errata_id": "5173",
    "doc-id": "RFC8200",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "4.5",
    "orig_text": "   reassembled original packet:\r\n\r\n   +---------------+-----------------+---------+--------+-//--+--------+\r\n   | Per-Fragment  |Ext & Upper-Layer|  first  | second |     | last   |\r\n   |    Headers    |     Headers     |frag data|fragment|.....|fragment|\r\n   +---------------+-----------------+---------+--------+-//--+--------+\r\n",
    "correct_text": "   reassembled original packet:\r\n\r\n   +---------------+-----------------+---------+--------+-//--+--------+\r\n   | Per-Fragment  |Ext & Upper-Layer|  first  | second |     | last   |\r\n   |    Headers    |     Headers     | fragment|fragment|.....|fragment|\r\n   +---------------+-----------------+---------+--------+-//--+--------+\r\n",
    "notes": "The figure in the \"original text\" is inconsistent with an earlier figure of the \"original packet\" (in page 18), where the \"Ext & Upper-Layer Headers\" part is followed by \"first fragment\" (rather than \"first fragment data\").\r\n\r\nAs an alternative to the \"corrected text\" above, one could modify such earlier figure (s/first fragment/first fragment data/), but this would beg a definition of \"how is a fragment composed?\" i.e., what's \"fragment data\" and what's not).\n --VERIFIER NOTES-- \nVerifier's Note by Suresh Krishnan (Responsible AD for 6man): The 6man working group has chosen to address the subject of this Erratum and other related Errata using a consolidated fix detailed in the Erratum report #5945. I would like to thank the submitter Fernando Gont for bringing this up. ",
    "submit_date": "2017-10-29",
    "submitter_name": "Fernando Gont",
    "verifier_id": "152",
    "verifier_name": "Suresh Krishnan",
    "update_date": "2020-02-03 06:16:27"
  },
  {
    "errata_id": "5256",
    "doc-id": "RFC8200",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "4.8",
    "orig_text": "      Hdr Ext Len           8-bit unsigned integer.  Length of the\r\n                            Destination Options header in 8-octet units,\r\n                            not including the first 8 octets.\r\n",
    "correct_text": "      Hdr Ext Len           8-bit unsigned integer.  Length of the\r\n                            extension header in 8-octet units,\r\n                            not including the first 8 octets.\r\n",
    "notes": "Copy-paste error.",
    "submit_date": "2018-02-06",
    "submitter_name": "Nikolai Malykh",
    "verifier_id": "152",
    "verifier_name": "Suresh Krishnan",
    "update_date": "2020-02-03 06:17:43"
  },
  {
    "errata_id": "5259",
    "doc-id": "RFC8200",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "Appendix B",
    "orig_text": "      -  Updated the Fragmentation header text to correct the inclusion\r\n         of an Authentication Header (AH) and noted No Next Header case.\r\n",
    "correct_text": "      -  Updated the Fragment header text to correct the inclusion\r\n         of an Authentication Header (AH) and noted No Next Header case.\r\n",
    "notes": "Typo",
    "submit_date": "2018-02-08",
    "submitter_name": "Nikolai Malykh",
    "verifier_id": "152",
    "verifier_name": "Suresh Krishnan",
    "update_date": "2020-02-03 06:18:47"
  },
  {
    "errata_id": "5506",
    "doc-id": "RFC8200",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "Appendix B.",
    "orig_text": "      -  Updated the Fragmentation header text to correct the inclusion\r\n         of an Authentication Header (AH) and noted No Next Header case.",
    "correct_text": "      -  Updated the Fragmentation header text to correct the inclusion\r\n         the Encapsulating Security Payload (ESP)  and noted No Next \r\n         Header case.",
    "notes": "The Extension headers are all other extension headers that are not\r\n      included in the Per-Fragment headers part of the packet.  For this\r\n      purpose, the Encapsulating Security Payload (ESP) is not\r\n      considered an extension header.  The Upper-Layer header is the\r\n      first upper-layer header that is not an IPv6 extension header.\r\n      Examples of upper-layer headers include TCP, UDP, IPv4, IPv6,\r\n      ICMPv6, and as noted ESP.\r\n\r\n      The Fragmentable Part consists of the rest of the packet after the\r\n      upper-layer header or after any header (i.e., initial IPv6 header\r\n      or extension header) that contains a Next Header value of No Next\r\n      Header.",
    "submit_date": "2018-09-27",
    "submitter_name": "jiangmaoyong",
    "verifier_id": "152",
    "verifier_name": "Suresh Krishnan",
    "update_date": "2020-02-03 06:19:35"
  },
  {
    "errata_id": "5933",
    "doc-id": "RFC8200",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4",
    "orig_text": "   Extension headers (except for the Hop-by-Hop Options header) are not\r\n   processed, inserted, or deleted by any node along a packet's delivery\r\n   path, until the packet reaches the node (or each of the set of nodes,\r\n   in the case of multicast) identified in the Destination Address field\r\n   of the IPv6 header.\r\n\r\n   The Hop-by-Hop Options header is not inserted or deleted, but may be\r\n   examined or processed by any node along a packet's delivery path,\r\n   until the packet reaches the node (or each of the set of nodes, in\r\n   the case of multicast) identified in the Destination Address field of\r\n   the IPv6 header.  The Hop-by-Hop Options header, when present, must\r\n   immediately follow the IPv6 header.  Its presence is indicated by the\r\n   value zero in the Next Header field of the IPv6 header.\r\n",
    "correct_text": "   Extension headers (except for the Hop-by-Hop Options header, or a \r\n   Destination Options header preceding a Routing header) are not processed,\r\n   inserted, or deleted by any node along a packet's delivery path, until the\r\n   packet reaches the final destination node (or each of the set of final\r\n   destination nodes, in the case of multicast). \r\n\r\n   For packets that do not include a Routing Header, the final destination\r\n   node is identified by the Destination Address field of the IPv6 header. \r\n   For packets that include a Routing Header, the final destination node is \r\n   identified by the Destination Address field of the IPv6 header only when\r\n   the Segments Left field of the Routing Header is 0. \r\n\r\n   The Hop-by-Hop Options header is not inserted or deleted, but may be\r\n   examined or processed by any node along a packet's delivery path,\r\n   until the packet reaches the final destination node (or each of the set of\r\n   final destination nodes, in the case of multicast). The Hop-by-Hop Options \r\n   header, when present, must immediately follow the IPv6 header.  Its \r\n   presence is indicated by the value zero in the Next Header field of the \r\n   IPv6 header.\r\n\r\n   A Destination Options header preceding a Routing Header is not\r\n   processed, inserted, or deleted by any node along a packet's delivery\r\n   path, until the packet reaches the destination node (or each of the set \r\n   of destination nodes, in the case of multicast) identified by the \r\n   Destination Address field of the IPv6 header. This means that  a \r\n   Destination Options header preceding a Routing Header will be\r\n   processed by the first destination of the packet (specified by the\r\n   Destination Address field of the IPv6 header at the origin node) and by \r\n   each node listed in the Routing Header.",
    "notes": "This errata clarifies two different issues:\r\n\r\n* It clarifies that nodes other than the final destination do not insert o remove extension headers.\r\n\r\n* It clarifies that the Destination Options header preceding a routing header *is* processed along the\r\n   packet delivery's path, but the node(s) identified by the Destination Address of the IPv6 header.\r\n\r\nArea Director's Note (Suresh Krishnan):\r\n\r\nI am handling this based on the IESG Statement about processing of RFC Errata for the IETF Stream (https://ietf.org/about/groups/iesg/statements/processing-rfc-errata/)\r\n\r\n\"Changes that modify the working of a protocol to something that might be different from the intended consensus when the document was approved should be either Hold for Document Update or Rejected. Deciding between these two depends on judgment. Changes that are clearly modifications to the intended consensus, or involve large textual changes, should be Rejected.\"\r\n\r\nSome people might interpret the text in RFC8200 to mean the replacement text provided above in the erratum but others might read the text exactly as written (\"until the packet reaches the node identified in the Destination Address field of the IPv6 header”). Given that the text in RFC8200 had consensus and it is impossible to tell after the fact if the proposed replacement text would have achieved consensus, I believe this erratum falls under the above category. \r\n\r\nThe change proposed by this erratum has to be evaluated for correctness and consensus if and when there is an update of RFC8200.",
    "submit_date": "2019-12-11",
    "submitter_name": "Fernando Gont",
    "verifier_id": "152",
    "verifier_name": "Suresh Krishnan",
    "update_date": "2020-03-01 19:29:39"
  },
  {
    "errata_id": "5945",
    "doc-id": "RFC8200",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "4.5",
    "orig_text": "4.5.  Fragment Header\r\n\r\n   The Fragment header is used by an IPv6 source to send a packet larger\r\n   than would fit in the path MTU to its destination.  (Note: unlike\r\n   IPv4, fragmentation in IPv6 is performed only by source nodes, not by\r\n   routers along a packet's delivery path -- see [RFC8200].)  The\r\n   Fragment header is identified by a Next Header value of 44 in the\r\n   immediately preceding header and has the following format:\r\n\r\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n   |  Next Header  |   Reserved    |      Fragment Offset    |Res|M|\r\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n   |                         Identification                        |\r\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n\r\n      Next Header         8-bit selector.  Identifies the initial header\r\n                          type of the Fragmentable Part of the original\r\n                          packet (defined below).  Uses the same values\r\n                          as the IPv4 Protocol field [IANA-PN].\r\n\r\n      Reserved            8-bit reserved field.  Initialized to zero for\r\n                          transmission; ignored on reception.\r\n\r\n      Fragment Offset     13-bit unsigned integer.  The offset, in\r\n                          8-octet units, of the data following this\r\n                          header, relative to the start of the\r\n                          Fragmentable Part of the original packet.\r\n\r\n      Res                 2-bit reserved field.  Initialized to zero for\r\n                          transmission; ignored on reception.\r\n\r\n      M flag              1 = more fragments; 0 = last fragment.\r\n\r\n      Identification      32 bits.  See description below.\r\n\r\n   In order to send a packet that is too large to fit in the MTU of the\r\n   path to its destination, a source node may divide the packet into\r\n   fragments and send each fragment as a separate packet, to be\r\n   reassembled at the receiver.\r\n\r\n   For every packet that is to be fragmented, the source node generates\r\n   an Identification value.  The Identification must be different than\r\n   that of any other fragmented packet sent recently* with the same\r\n   Source Address and Destination Address.  If a Routing header is\r\n   present, the Destination Address of concern is that of the final\r\n   destination.\r\n\r\n\r\n      *  \"recently\" means within the maximum likely lifetime of a\r\n         packet, including transit time from source to destination and\r\n         time spent awaiting reassembly with other fragments of the same\r\n         packet.  However, it is not required that a source node knows\r\n         the maximum packet lifetime.  Rather, it is assumed that the\r\n         requirement can be met by implementing an algorithm that\r\n         results in a low identification reuse frequency.  Examples of\r\n         algorithms that can meet this requirement are described in\r\n         [RFC7739].\r\n\r\n   The initial, large, unfragmented packet is referred to as the\r\n   \"original packet\", and it is considered to consist of three parts, as\r\n   illustrated:\r\n\r\n   original packet:\r\n\r\n   +------------------+-------------------------+---//----------------+\r\n   |  Per-Fragment    | Extension & Upper-Layer |   Fragmentable      |\r\n   |    Headers       |       Headers           |      Part           |\r\n   +------------------+-------------------------+---//----------------+\r\n\r\n      The Per-Fragment headers must consist of the IPv6 header plus any\r\n      extension headers that must be processed by nodes en route to the\r\n      destination, that is, all headers up to and including the Routing\r\n      header if present, else the Hop-by-Hop Options header if present,\r\n      else no extension headers.\r\n\r\n      The Extension headers are all other extension headers that are not\r\n      included in the Per-Fragment headers part of the packet.  For this\r\n      purpose, the Encapsulating Security Payload (ESP) is not\r\n      considered an extension header.  The Upper-Layer header is the\r\n      first upper-layer header that is not an IPv6 extension header.\r\n      Examples of upper-layer headers include TCP, UDP, IPv4, IPv6,\r\n      ICMPv6, and as noted ESP.\r\n\r\n      The Fragmentable Part consists of the rest of the packet after the\r\n      upper-layer header or after any header (i.e., initial IPv6 header\r\n      or extension header) that contains a Next Header value of No Next\r\n      Header.\r\n\r\n   The Fragmentable Part of the original packet is divided into\r\n   fragments.  The lengths of the fragments must be chosen such that the\r\n   resulting fragment packets fit within the MTU of the path to the\r\n   packet's destination(s).  Each complete fragment, except possibly the\r\n   last (\"rightmost\") one, is an integer multiple of 8 octets long.\r\n\r\n   The fragments are transmitted in separate \"fragment packets\" as\r\n   illustrated:\r\n\r\n   original packet:\r\n\r\n   +-----------------+-----------------+--------+--------+-//-+--------+\r\n   |  Per-Fragment   |Ext & Upper-Layer|  first | second |    |  last  |\r\n   |    Headers      |    Headers      |fragment|fragment|....|fragment|\r\n   +-----------------+-----------------+--------+--------+-//-+--------+\r\n\r\n   fragment packets:\r\n\r\n   +------------------+---------+-------------------+----------+\r\n   |  Per-Fragment    |Fragment | Ext & Upper-Layer |  first   |\r\n   |    Headers       | Header  |   Headers         | fragment |\r\n   +------------------+---------+-------------------+----------+\r\n\r\n   +------------------+--------+-------------------------------+\r\n   |  Per-Fragment    |Fragment|    second                     |\r\n   |    Headers       | Header |   fragment                    |\r\n   +------------------+--------+-------------------------------+\r\n                         o\r\n                         o\r\n                         o\r\n   +------------------+--------+----------+\r\n   |  Per-Fragment    |Fragment|   last   |\r\n   |    Headers       | Header | fragment |\r\n   +------------------+--------+----------+\r\n\r\n   The first fragment packet is composed of:\r\n\r\n      (1)  The Per-Fragment headers of the original packet, with the\r\n           Payload Length of the original IPv6 header changed to contain\r\n           the length of this fragment packet only (excluding the length\r\n           of the IPv6 header itself), and the Next Header field of the\r\n           last header of the Per-Fragment headers changed to 44.\r\n\r\n      (2)  A Fragment header containing:\r\n\r\n              The Next Header value that identifies the first header\r\n              after the Per-Fragment headers of the original packet.\r\n\r\n              A Fragment Offset containing the offset of the fragment,\r\n              in 8-octet units, relative to the start of the\r\n              Fragmentable Part of the original packet.  The Fragment\r\n              Offset of the first (\"leftmost\") fragment is 0.\r\n\r\n              An M flag value of 1 as this is the first fragment.\r\n\r\n              The Identification value generated for the original\r\n              packet.\r\n\r\n      (3)  Extension headers, if any, and the Upper-Layer header.  These\r\n           headers must be in the first fragment.  Note: This restricts\r\n           the size of the headers through the Upper-Layer header to the\r\n           MTU of the path to the packet's destinations(s).\r\n\r\n      (4)  The first fragment.\r\n\r\n   The subsequent fragment packets are composed of:\r\n\r\n      (1)  The Per-Fragment headers of the original packet, with the\r\n           Payload Length of the original IPv6 header changed to contain\r\n           the length of this fragment packet only (excluding the length\r\n           of the IPv6 header itself), and the Next Header field of the\r\n           last header of the Per-Fragment headers changed to 44.\r\n\r\n      (2)  A Fragment header containing:\r\n\r\n              The Next Header value that identifies the first header\r\n              after the Per-Fragment headers of the original packet.\r\n\r\n              A Fragment Offset containing the offset of the fragment,\r\n              in 8-octet units, relative to the start of the\r\n              Fragmentable Part of the original packet.\r\n\r\n              An M flag value of 0 if the fragment is the last\r\n              (\"rightmost\") one, else an M flag value of 1.\r\n\r\n              The Identification value generated for the original\r\n              packet.\r\n\r\n      (3)  The fragment itself.\r\n\r\n   Fragments must not be created that overlap with any other fragments\r\n   created from the original packet.\r\n\r\n   At the destination, fragment packets are reassembled into their\r\n   original, unfragmented form, as illustrated:\r\n\r\n   reassembled original packet:\r\n\r\n   +---------------+-----------------+---------+--------+-//--+--------+\r\n   | Per-Fragment  |Ext & Upper-Layer|  first  | second |     | last   |\r\n   |    Headers    |     Headers     |frag data|fragment|.....|fragment|\r\n   +---------------+-----------------+---------+--------+-//--+--------+\r\n\r\n   The following rules govern reassembly:\r\n\r\n      An original packet is reassembled only from fragment packets that\r\n      have the same Source Address, Destination Address, and Fragment\r\n      Identification.\r\n\r\n      The Per-Fragment headers of the reassembled packet consists of all\r\n      headers up to, but not including, the Fragment header of the first\r\n      fragment packet (that is, the packet whose Fragment Offset is\r\n      zero), with the following two changes:\r\n\r\n         The Next Header field of the last header of the Per-Fragment\r\n         headers is obtained from the Next Header field of the first\r\n         fragment's Fragment header.\r\n\r\n         The Payload Length of the reassembled packet is computed from\r\n         the length of the Per-Fragment headers and the length and\r\n         offset of the last fragment.  For example, a formula for\r\n         computing the Payload Length of the reassembled original packet\r\n         is:\r\n\r\n            PL.orig = PL.first - FL.first - 8 + (8 * FO.last) + FL.last\r\n\r\n\r\n            where\r\n            PL.orig  =  Payload Length field of reassembled packet.\r\n            PL.first =  Payload Length field of first fragment packet.\r\n            FL.first =  length of fragment following Fragment header of\r\n                        first fragment packet.\r\n            FO.last  =  Fragment Offset field of Fragment header of last\r\n                        fragment packet.\r\n            FL.last  =  length of fragment following Fragment header of\r\n                        last fragment packet.\r\n\r\n         The Fragmentable Part of the reassembled packet is constructed\r\n         from the fragments following the Fragment headers in each of\r\n         the fragment packets.  The length of each fragment is computed\r\n         by subtracting from the packet's Payload Length the length of\r\n         the headers between the IPv6 header and fragment itself; its\r\n         relative position in Fragmentable Part is computed from its\r\n         Fragment Offset value.\r\n\r\n         The Fragment header is not present in the final, reassembled\r\n         packet.\r\n\r\n         If the fragment is a whole datagram (that is, both the Fragment\r\n         Offset field and the M flag are zero), then it does not need\r\n         any further reassembly and should be processed as a fully\r\n         reassembled packet (i.e., updating Next Header, adjust Payload\r\n         Length, removing the Fragment header, etc.).  Any other\r\n         fragments that match this packet (i.e., the same IPv6 Source\r\n         Address, IPv6 Destination Address, and Fragment Identification)\r\n         should be processed independently.\r\n\r\n   The following error conditions may arise when reassembling fragmented\r\n   packets:\r\n\r\n      o  If insufficient fragments are received to complete reassembly\r\n         of a packet within 60 seconds of the reception of the first-\r\n         arriving fragment of that packet, reassembly of that packet\r\n         must be abandoned and all the fragments that have been received\r\n         for that packet must be discarded.  If the first fragment\r\n         (i.e., the one with a Fragment Offset of zero) has been\r\n         received, an ICMP Time Exceeded -- Fragment Reassembly Time\r\n         Exceeded message should be sent to the source of that fragment.\r\n\r\n      o  If the length of a fragment, as derived from the fragment\r\n         packet's Payload Length field, is not a multiple of 8 octets\r\n         and the M flag of that fragment is 1, then that fragment must\r\n         be discarded and an ICMP Parameter Problem, Code 0, message\r\n         should be sent to the source of the fragment, pointing to the\r\n         Payload Length field of the fragment packet.\r\n\r\n      o  If the length and offset of a fragment are such that the\r\n         Payload Length of the packet reassembled from that fragment\r\n         would exceed 65,535 octets, then that fragment must be\r\n         discarded and an ICMP Parameter Problem, Code 0, message should\r\n         be sent to the source of the fragment, pointing to the Fragment\r\n         Offset field of the fragment packet.\r\n\r\n      o  If the first fragment does not include all headers through an\r\n         Upper-Layer header, then that fragment should be discarded and\r\n         an ICMP Parameter Problem, Code 3, message should be sent to\r\n         the source of the fragment, with the Pointer field set to zero.\r\n\r\n      o  If any of the fragments being reassembled overlap with any\r\n         other fragments being reassembled for the same packet,\r\n         reassembly of that packet must be abandoned and all the\r\n         fragments that have been received for that packet must be\r\n         discarded, and no ICMP error messages should be sent.\r\n\r\n         It should be noted that fragments may be duplicated in the\r\n         network.  Instead of treating these exact duplicate fragments\r\n         as overlapping fragments, an implementation may choose to\r\n         detect this case and drop exact duplicate fragments while\r\n         keeping the other fragments belonging to the same packet.\r\n\r\n   The following conditions are not expected to occur frequently but are\r\n   not considered errors if they do:\r\n\r\n      The number and content of the headers preceding the Fragment\r\n      header of different fragments of the same original packet may\r\n      differ.  Whatever headers are present, preceding the Fragment\r\n      header in each fragment packet, are processed when the packets\r\n      arrive, prior to queueing the fragments for reassembly.  Only\r\n      those headers in the Offset zero fragment packet are retained in\r\n      the reassembled packet.\r\n\r\n      The Next Header values in the Fragment headers of different\r\n      fragments of the same original packet may differ.  Only the value\r\n      from the Offset zero fragment packet is used for reassembly.\r\n\r\n      Other fields in the IPv6 header may also vary across the fragments\r\n      being reassembled.  Specifications that use these fields may\r\n      provide additional instructions if the basic mechanism of using\r\n      the values from the Offset zero fragment is not sufficient.  For\r\n      example, Section 5.3 of [RFC3168] describes how to combine the\r\n      Explicit Congestion Notification (ECN) bits from different\r\n      fragments to derive the ECN bits of the reassembled packet.\r\n      \r\n",
    "correct_text": "4.5.  Fragment Header\r\n\r\n   The Fragment header is used by an IPv6 source to send a packet larger\r\n   than would fit in the path MTU to its destination.  (Note: unlike\r\n   IPv4, fragmentation in IPv6 is performed only by source nodes, not by\r\n   routers along a packet's delivery path -- see [RFC8200].)  The\r\n   Fragment header is identified by a Next Header value of 44 in the\r\n   immediately preceding header and has the following format:\r\n\r\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n   |  Next Header  |   Reserved    |      Fragment Offset    |Res|M|\r\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n   |                         Identification                        |\r\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n\r\n      Next Header         8-bit selector.  Identifies the initial header\r\n                          type of the Fragmentable Part of the original\r\n                          packet (defined below).  Uses the same values\r\n                          as the IPv4 Protocol field [IANA-PN].\r\n\r\n      Reserved            8-bit reserved field.  Initialized to zero for\r\n                          transmission; ignored on reception.\r\n\r\n      Fragment Offset     13-bit unsigned integer.  The offset, in\r\n                          8-octet units, of the data following this\r\n                          header, relative to the start of the\r\n                          Fragmentable Part of the original packet.\r\n\r\n      Res                 2-bit reserved field.  Initialized to zero for\r\n                          transmission; ignored on reception.\r\n\r\n      M flag              1 = more fragments; 0 = last fragment.\r\n\r\n      Identification      32 bits.  See description below.\r\n\r\n   In order to send a packet that is too large to fit in the MTU of the\r\n   path to its destination, a source node may divide the packet into\r\n   fragments and send each fragment as a separate packet, to be\r\n   reassembled at the receiver.\r\n\r\n   For every packet that is to be fragmented, the source node generates\r\n   an Identification value.  The Identification must be different than\r\n   that of any other fragmented packet sent recently* with the same\r\n   Source Address and Destination Address.  If a Routing header is\r\n   present, the Destination Address of concern is that of the final\r\n   destination.\r\n\r\n      *  \"recently\" means within the maximum likely lifetime of a\r\n         packet, including transit time from source to destination and\r\n         time spent awaiting reassembly with other fragments of the same\r\n         packet.  However, it is not required that a source node knows\r\n         the maximum packet lifetime.  Rather, it is assumed that the\r\n         requirement can be met by implementing an algorithm that\r\n         results in a low identification reuse frequency.  Examples of\r\n         algorithms that can meet this requirement are described in\r\n         [RFC7739].\r\n\r\n   The initial, large, unfragmented packet is referred to as the\r\n   \"original packet\", and it is considered to consist of two parts, as\r\n   illustrated:\r\n\r\n   original packet:\r\n\r\n   +------------------+-----------------------------//----------------+\r\n   |  Per-Fragment    |               Fragmentable                    |\r\n   |    Headers       |                   Part                        |\r\n   +------------------+-----------------------------//----------------+\r\n\r\n      The Per-Fragment headers must consist of the IPv6 header plus any\r\n      extension headers that must be processed by nodes en route to the\r\n      destination, that is, all headers up to and including the Routing\r\n      header if present, else the Hop-by-Hop Options header if present,\r\n      else no extension headers.\r\n\r\n      The Fragmentable Part consists of the rest of the packet, that is,\r\n      any extension headers that need be processed only by the final\r\n      destination node(s), plus the upper-layer header and data.\r\n\r\n   The Fragmentable Part of the original packet is divided into\r\n   fragments.  The lengths of the fragments must be chosen such that the\r\n   resulting fragment packets fit within the MTU of the path to the\r\n   packet's destination(s).  Each complete fragment, except possibly the\r\n   last (\"rightmost\") one, is an integer multiple of 8 octets long.\r\n\r\n   The fragments are transmitted in separate \"fragment packets\" as\r\n   illustrated:\r\n\r\n   original packet:\r\n\r\n    +------------------+--------------+--------------+--//--+----------+\r\n    |  Per-Fragment    |    first     |    second    |      |   last   |\r\n    |   Headers        |   fragment   |   fragment   | .... | fragment |\r\n    +------------------+--------------+--------------+--//--+----------+\r\n\r\n   fragment packets:\r\n\r\n   +------------------+--------+--------------+\r\n   |  Per-Fragment    |Fragment|    first     |\r\n   |    Headers       | Header |   fragment   |\r\n   +------------------+--------+--------------+\r\n\r\n   +------------------+--------+--------------+\r\n   |  Per-Fragment    |Fragment|    second    |\r\n   |    Headers       | Header |   fragment   |\r\n   +------------------+--------+--------------+\r\n                         o\r\n                         o\r\n                         o\r\n   +------------------+--------+----------+\r\n   |  Per-Fragment    |Fragment|   last   |\r\n   |    Headers       | Header | fragment |\r\n   +------------------+--------+----------+\r\n\r\n   The first fragment packet is composed of:\r\n\r\n      (1)  The Per-Fragment headers of the original packet, with the\r\n           Payload Length of the original IPv6 header changed to contain\r\n           the length of this fragment packet only (excluding the length\r\n           of the IPv6 header itself), and the Next Header field of the\r\n           last header of the Per-Fragment headers changed to 44.\r\n\r\n      (2)  A Fragment header containing:\r\n\r\n              The Next Header value that identifies the first header\r\n              after the Per-Fragment headers of the original packet.\r\n\r\n              A Fragment Offset containing the offset of the fragment,\r\n              in 8-octet units, relative to the start of the\r\n              Fragmentable Part of the original packet.  The Fragment\r\n              Offset of the first (\"leftmost\") fragment is 0.\r\n\r\n              An M flag value of 1 as this is the first fragment.\r\n\r\n              The Identification value generated for the original\r\n              packet.\r\n\r\n      (3)  Extension headers, if any, and the Upper-Layer header.  These\r\n           headers must be in the first fragment.  Note: This restricts\r\n           the size of the headers through the Upper-Layer header to the\r\n           MTU of the path to the packet's destinations(s).\r\n\r\n           Extension headers are all other extension headers that are\r\n           not included in the Per-Fragment headers part of the packet.\r\n           For this purpose, the Encapsulating Security Payload (ESP) is\r\n           not considered an extension header.  The Upper-Layer header\r\n           is the first upper-layer header that is not an IPv6 extension\r\n           header.  Examples of upper-layer headers include TCP, UDP,\r\n           IPv4, IPv6, ICMPv6, and as noted ESP.\r\n\r\n      (4)  The remainder of the first fragment.\r\n\r\n   The subsequent fragment packets are composed of:\r\n\r\n      (1)  The Per-Fragment headers of the original packet, with the\r\n           Payload Length of the original IPv6 header changed to contain\r\n           the length of this fragment packet only (excluding the length\r\n           of the IPv6 header itself), and the Next Header field of the\r\n           last header of the Per-Fragment headers changed to 44.\r\n\r\n      (2)  A Fragment header containing:\r\n\r\n              The Next Header value that identifies the first header\r\n              after the Per-Fragment headers of the original packet.\r\n\r\n              A Fragment Offset containing the offset of the fragment,\r\n              in 8-octet units, relative to the start of the\r\n              Fragmentable Part of the original packet.\r\n\r\n              An M flag value of 0 if the fragment is the last\r\n              (\"rightmost\") one, else an M flag value of 1.\r\n\r\n              The Identification value generated for the original\r\n              packet.\r\n\r\n      (3)  The fragment itself.\r\n\r\n   Fragments must not be created that overlap with any other fragments\r\n   created from the original packet.\r\n\r\n   At the destination, fragment packets are reassembled into their\r\n   original, unfragmented form, as illustrated:\r\n\r\n   reassembled original packet:\r\n\r\n   +------------------+----------------------//------------------------+\r\n   |  Per-Fragment    |                 Fragmentable                   |\r\n   |    Headers       |                     Part                       |\r\n   +------------------+----------------------//------------------------+\r\n\r\n   The following rules govern reassembly:\r\n\r\n      An original packet is reassembled only from fragment packets that\r\n      have the same Source Address, Destination Address, and Fragment\r\n      Identification.\r\n\r\n      The Per-Fragment headers of the reassembled packet consists of all\r\n      headers up to, but not including, the Fragment header of the first\r\n      fragment packet (that is, the packet whose Fragment Offset is\r\n      zero), with the following two changes:\r\n\r\n         The Next Header field of the last header of the Per-Fragment\r\n         headers is obtained from the Next Header field of the first\r\n         fragment's Fragment header.\r\n\r\n         The Payload Length of the reassembled packet is computed from\r\n         the length of the Per-Fragment headers and the length and\r\n         offset of the last fragment.  For example, a formula for\r\n         computing the Payload Length of the reassembled original packet\r\n         is:\r\n\r\n            PL.orig = PL.first - FL.first - 8 + (8 * FO.last) + FL.last\r\n\r\n\r\n            where\r\n            PL.orig  =  Payload Length field of reassembled packet.\r\n            PL.first =  Payload Length field of first fragment packet.\r\n            FL.first =  length of fragment following Fragment header of\r\n                        first fragment packet.\r\n            FO.last  =  Fragment Offset field of Fragment header of last\r\n                        fragment packet.\r\n            FL.last  =  length of fragment following Fragment header of\r\n                        last fragment packet.\r\n\r\n         The Fragmentable Part of the reassembled packet is constructed\r\n         from the fragments following the Fragment headers in each of\r\n         the fragment packets.  The length of each fragment is computed\r\n         by subtracting from the packet's Payload Length the length of\r\n         the headers between the IPv6 header and fragment itself; its\r\n         relative position in Fragmentable Part is computed from its\r\n         Fragment Offset value.\r\n\r\n         The Fragment header is not present in the final, reassembled\r\n         packet.\r\n\r\n         If the fragment is a whole datagram (that is, both the Fragment\r\n         Offset field and the M flag are zero), then it does not need\r\n         any further reassembly and should be processed as a fully\r\n         reassembled packet (i.e., updating Next Header, adjust Payload\r\n         Length, removing the Fragment header, etc.).  Any other\r\n         fragments that match this packet (i.e., the same IPv6 Source\r\n         Address, IPv6 Destination Address, and Fragment Identification)\r\n         should be processed independently.\r\n\r\n   The following error conditions may arise when reassembling fragmented\r\n   packets:\r\n\r\n      o  If insufficient fragments are received to complete reassembly\r\n         of a packet within 60 seconds of the reception of the first-\r\n         arriving fragment of that packet, reassembly of that packet\r\n         must be abandoned and all the fragments that have been received\r\n         for that packet must be discarded.  If the first fragment\r\n         (i.e., the one with a Fragment Offset of zero) has been\r\n         received, an ICMP Time Exceeded -- Fragment Reassembly Time\r\n         Exceeded message should be sent to the source of that fragment.\r\n\r\n      o  If the length of a fragment, as derived from the fragment\r\n         packet's Payload Length field, is not a multiple of 8 octets\r\n         and the M flag of that fragment is 1, then that fragment must\r\n         be discarded and an ICMP Parameter Problem, Code 0, message\r\n         should be sent to the source of the fragment, pointing to the\r\n         Payload Length field of the fragment packet.\r\n\r\n      o  If the length and offset of a fragment are such that the\r\n         Payload Length of the packet reassembled from that fragment\r\n         would exceed 65,535 octets, then that fragment must be\r\n         discarded and an ICMP Parameter Problem, Code 0, message should\r\n         be sent to the source of the fragment, pointing to the Fragment\r\n         Offset field of the fragment packet.\r\n\r\n      o  If the first fragment does not include all headers through an\r\n         Upper-Layer header, then that fragment should be discarded and\r\n         an ICMP Parameter Problem, Code 3, message should be sent to\r\n         the source of the fragment, with the Pointer field set to zero.\r\n\r\n      o  If any of the fragments being reassembled overlap with any\r\n         other fragments being reassembled for the same packet,\r\n         reassembly of that packet must be abandoned and all the\r\n         fragments that have been received for that packet must be\r\n         discarded, and no ICMP error messages should be sent.\r\n\r\n         It should be noted that fragments may be duplicated in the\r\n         network.  Instead of treating these exact duplicate fragments\r\n         as overlapping fragments, an implementation may choose to\r\n         detect this case and drop exact duplicate fragments while\r\n         keeping the other fragments belonging to the same packet.\r\n\r\n   The following conditions are not expected to occur frequently but are\r\n   not considered errors if they do:\r\n\r\n      The number and content of the headers preceding the Fragment\r\n      header of different fragments of the same original packet may\r\n      differ.  Whatever headers are present, preceding the Fragment\r\n      header in each fragment packet, are processed when the packets\r\n      arrive, prior to queueing the fragments for reassembly.  Only\r\n      those headers in the Offset zero fragment packet are retained in\r\n      the reassembled packet.\r\n\r\n      The Next Header values in the Fragment headers of different\r\n      fragments of the same original packet may differ.  Only the value\r\n      from the Offset zero fragment packet is used for reassembly.\r\n\r\n      Other fields in the IPv6 header may also vary across the fragments\r\n      being reassembled.  Specifications that use these fields may\r\n      provide additional instructions if the basic mechanism of using\r\n      the values from the Offset zero fragment is not sufficient.  For\r\n      example, Section 5.3 of [RFC3168] describes how to combine the\r\n      Explicit Congestion Notification (ECN) bits from different\r\n      fragments to derive the ECN bits of the reassembled packet.\r\n",
    "notes": "This errata replaces and resolves the issues raised in Errata 5170, 5171, 5172, 5173.   Credit goes to Fernando Gont for reporting the issues raised in these errata.   They correctly reported that the text in Section 4.5 of RFC8200 defined Fragment Offset as pointing to “Fragmentable Part”, this was an error and should have pointed to “Extension & Upper-Layer Headers”.\r\n\r\nAfter review by the 6man working group the conclusion was to fix the issue in a more general way than what was proposed in Errata 5170, 5171, 5172, 5173, hence the need for a new errata.",
    "submit_date": "2019-12-24",
    "submitter_name": "Bob Hinden",
    "verifier_id": "152",
    "verifier_name": "Suresh Krishnan",
    "update_date": "2020-02-03 06:16:57"
  },
  {
    "errata_id": "6003",
    "doc-id": "RFC8200",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "4",
    "orig_text": "   Extension headers (except for the Hop-by-Hop Options header) are not\r\n   processed, inserted, or deleted by any node along a packet's delivery\r\n   path, until the packet reaches the node (or each of the set of nodes,\r\n   in the case of multicast) identified in the Destination Address field\r\n   of the IPv6 header.\r\n\r\n   The Hop-by-Hop Options header is not inserted or deleted, but may be\r\n   examined or processed by any node along a packet's delivery path,\r\n   until the packet reaches the node (or each of the set of nodes, in\r\n   the case of multicast) identified in the Destination Address field of\r\n   the IPv6 header.  The Hop-by-Hop Options header, when present, must\r\n   immediately follow the IPv6 header.  Its presence is indicated by the\r\n   value zero in the Next Header field of the IPv6 header.",
    "correct_text": "   The source node of a packet, identified by the source address, may\r\n   include extension headers in a packet when it is created. Extension\r\n   headers must not be inserted or removed or have their length altered\r\n   by any node for the lifetime of the IPv6 packet. Note that it follows\r\n   from these requirements that the length of an IPv6 packet cannot\r\n   change once the packet has been created by the source node. The\r\n   aforementioned rules apply to all IPv6 extension headers.\r\n\r\n   Extension headers (except for the Hop-by-Hop Options header, a\r\n   Routing Header, or a Destination Options header preceding a Routing\r\n   Header) are not processed by any node along a packet's delivery path,\r\n   until the packet reaches the final destination node (or each of the\r\n   set of final destination nodes, in the case of multicast).\r\n\r\n   For packets that do not include a Routing Header, the final\r\n   destination node is identified by the Destination Address field of\r\n   the IPv6 header. For packets that include a Routing Header, the final\r\n   destination node is identified by the Destination Address field of\r\n   the IPv6 header only when the Segments Left field of the Routing\r\n   Header is 0.\r\n\r\n   The Hop-by-Hop Options header may be examined or processed by any\r\n   node along a packet's delivery path, until the packet reaches the\r\n   final destination node (or each of the set of final destination\r\n   nodes, in the case of multicast). The Hop-by-Hop Options header, when\r\n   present, must immediately follow the IPv6 header.  Its presence is\r\n   indicated by the value zero in the Next Header field of the IPv6\r\n   header.\r\n\r\n   A Destination Options header preceding a Routing Header is processed\r\n   only by the destination node (or each of the set of destination\r\n   nodes, in the case of multicast) identified by the Destination\r\n   Address field of the IPv6 header. This means that a Destination\r\n   Options header preceding a Routing Header will be processed by the\r\n   first destination of the packet (specified by the Destination Address\r\n   field of the IPv6 header at the source node) and by each node listed\r\n   in the Routing Header.\r\n\r\n   A Routing Header is processed only by the destination node (or each\r\n   of the set of destination nodes, in the case of multicast) identified\r\n   by the Destination Address field of the IPv6 header. This means that\r\n   a Routing Header will be processed by the first destination of the\r\n   packet (specified by the Destination Address field of the IPv6 header\r\n   at the source node) and by each node listed in the Routing Header. ",
    "notes": "This erratum addresses the following problems from RFC8200:\r\n\r\n* It clarifies that IPv6 does not support en-route insertion/removal\r\n  of IPv6 Extension Headers\r\n\r\n* Clarifies the the processing rules for Routing Headers and Destination\r\n  Options headers preceding a Routing Header.\r\n\r\n\r\nRATIONALE:\r\n\r\nIPv6 never supported the en-route insertion/removal of IPv6 Extension Headers, since it would have broken a number of IPv6 core components, including:\r\n\r\n* IPsec Authentication Header (AH)\r\n\r\n* Path-MTU Discovery for IPv6 (RFC8201)\r\n\r\n* Error reporting based on ICMPv6 error messages (RFC4443), since hosts\r\n  validate that received error messages correspond to packets sent by\r\n  the host receiving the error message.\r\n\r\n\r\nIt was the intent of RFC8200 to clarify this behavior, as noted by Appendix B (\"Changes Since RFC 2460\") of RFC8200:\r\n\r\n   o  Clarified that extension headers (except for the Hop-by-Hop\r\n      Options header) are not processed, inserted, or deleted by any\r\n      node along a packet's delivery path.\r\n\r\nhowever, the resulting text was far from perfect. This erratum means to more closely reflect and respect the intent of RFC8200.\r\n\r\nThe corrected text has benefited from the review and input from Ron Bonica, Brian Carpenter, and Tom Herbert.\n --VERIFIER NOTES-- \nSection 3 clearly highlights for the reader when the IPv6 Destination Address in the header might differ from the IPv6 address of the ultimate destination.\r\n\r\nAs such, all references in the document to \"Destination Address\" lacking further qualifying text should be read bearing this in mind.  The text in section 4 is no exception.  The key text has remained unchanged since RFC 1883.\r\n\r\nThough it may be fraught with operational peril, including impeding the correct processing by the source node of a received ICMPv6 error message's encapsulated packet payload, a strict literal reading of the existing text affords any node in the header's Destination Address field a (possibly surprising) degree of flexibility in the handling of extension headers.\r\n\r\nIf IPsec AH (RFC 4302) were in use, the overall IPv6 header Payload Length field would need to remain intact, but the contents of certain types of extension headers between the IPv6 header and the AH header may not need to be preserved.  If AH is not in use, it is not clear that any AH-related requirements need apply at all.\r\n\r\nGiven the continuing discussion, whether this text (and its strict literal interpretation) is a feature or a bug appears to lack consensus.\r\n\r\nIn fact, considering the apparent lack of substantive progress toward resolution on this issue in the working group since https://www.rfc-editor.org/errata/eid5933 previously attempted to revise this text, continuing use of the erratum report process for this could risk the appearance of bypassing the working group consensus process.\r\n\r\nThe text from Section 3 makes it clear that making the kind of change proposed would require a consensus change; this is not a matter to be address by an erratum alone.\r\n",
    "submit_date": "2020-03-02",
    "submitter_name": "Fernando Gont",
    "verifier_id": "165",
    "verifier_name": "Erik Kline",
    "update_date": "2020-05-10 11:41:11"
  },
  {
    "errata_id": "6248",
    "doc-id": "RFC8200",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "4.5",
    "orig_text": "      The Per-Fragment headers must consist of the IPv6 header plus any\r\n      extension headers that must be processed by nodes en route to the\r\n      destination, that is, all headers up to and including the Routing\r\n      header if present, else the Hop-by-Hop Options header if present,\r\n      else no extension headers.",
    "correct_text": "      The Per-Fragment headers must consist of the IPv6 header plus any\r\n      extension headers that must be processed by nodes en route to the\r\n      destination. In the recommended order of extension headers listed \r\n      in section 4.1, the Per-Fragment headers include all headers up to \r\n      and including the Routing header if present, else the Hop-by-Hop \r\n      Options header if present, else no extension headers. In case the\r\n      order of extension headers is specified, the Per-Fragment headers \r\n      include all headers that is required to be before the Fragment Header.",
    "notes": "1. As specified in in section 4.1 of RFC8200, the recommended order of existing extension headers could be revised, and there have been some examples in the RFCs that do such revision: RFC7837, RFC6275 and its related RFCs, RFC3775/RFC3776/RFC4784. \r\n2. RFC6275 requires DoH carrying a special option to be placed before Fragmentation header. This gives an example how to support Fragmentation with the order of extension headers revised.\r\n3. As specified in section 4.8 of RFC8200, new extension headers could be defined, and there may be some new Per-fragment header(s) defined requiring en route processing with fragmentation support.",
    "submit_date": "2020-08-06",
    "submitter_name": "Jingrong Xie",
    "verifier_id": "165",
    "verifier_name": "Erik Kline",
    "update_date": "2025-08-10 17:22:40"
  }
]

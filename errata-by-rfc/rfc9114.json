[
  {
    "errata_id": "7014",
    "doc-id": "RFC9114",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "4.3.1",
    "orig_text": "   \":path\":  Contains the path and query parts of the target URI (the\r\n      \"path-absolute\" production and optionally a ? character (ASCII\r\n      0x3f) followed by the \"query\" production; see Sections 3.3 and 3.4\r\n      of [URI].",
    "correct_text": "   \":path\":  Contains the path and query parts of the target URI (the\r\n      \"absolute-path\" production and optionally a ? character (ASCII\r\n      0x3f) followed by the \"query\" production; see Section 4.1 of\r\n      [HTTP] and Section 3.4 of [URI].",
    "notes": "There is a conflict between RFC 9114 and RFCs 9110,9112,9113. RFC 9114 disallows paths that start with \"//\" whereas the others allow them. Research seems to indicate that this was not intentional. More details on the mailing list discussion: https://lists.w3.org/Archives/Public/ietf-http-wg/2022JulSep/0014.html",
    "submit_date": "2022-07-06",
    "submitter_name": "David Schinazi",
    "verifier_id": "172",
    "verifier_name": "Zaheduzzaman Sarker",
    "update_date": "2022-09-27 11:27:39"
  },
  {
    "errata_id": "7238",
    "doc-id": "RFC9114",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "4.2.2",
    "orig_text": "Because this limit is applied separately by each implementation that\r\nprocesses the message, messages below this limit are not guaranteed\r\nto be accepted.\r\n",
    "correct_text": "Because this limit is applied separately by each implementation that\r\nprocesses the message, messages above this limit are not guaranteed\r\nto be accepted.\r\n",
    "notes": "The section 4.2.2 specifies header size constraints and notes that implementations can send a SETTINGS frame with a SETTINGS_MAX_FIELD_SECTION_SIZE identifier to set a limit on the maximum size of the message header. Since this a maximum size, the sentence that states that intermediaries aren't guaranteed to accept a message below this limit seems odd and I think it should instead say \"above this limit\".\n --VERIFIER NOTES-- \nThe current RFC text is correct. The problem that is being described is where 1) a client sends a message smaller than MAX_FIELD_SECTION_SIZE and might expect that to work but 2) the server is an intermediary that needs to forward the message onto another server that, for example,  has a smaller value for MAX_FIELD_SECTION_SIZE preventing this.\r\n\r\nAny further clarification to this text, if any is needed, should be made via an update to this document. We encourage you to participate in suggesting improvement/clarifications by opening an issue on the spec issue tracker (https://github.com/quicwg) or in the mailing list: <quic@ietf.org>.\r\n\r\nSee https://mailarchive.ietf.org/arch/msg/quic/8E8kNJe1VGKEjotTl3IT2oZoGGo/",
    "submit_date": "2022-11-04",
    "submitter_name": "Jaikiran Pai",
    "verifier_id": "170",
    "verifier_name": "Francesca Palombini",
    "update_date": "2024-10-30 01:54:40"
  },
  {
    "errata_id": "7702",
    "doc-id": "RFC9114",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "10.7",
    "orig_text": "   Where HTTP/2 employs PADDING frames and Padding fields in other\r\n   frames to make a connection more resistant to traffic analysis,\r\n   HTTP/3 can either rely on transport-layer padding or employ the\r\n   reserved frame and stream types discussed in Sections 7.2.8 and\r\n   6.2.3.  ",
    "correct_text": "   Where HTTP/2 employs Padding fields in some\r\n   frames to make a connection more resistant to traffic analysis,\r\n   HTTP/3 can either rely on transport-layer padding or employ the\r\n   reserved frame and stream types discussed in Sections 7.2.8 and\r\n   6.2.3.  ",
    "notes": "HTTP/2 doesn't define PADDING frames",
    "submit_date": "2023-11-15",
    "submitter_name": "Lucas Pardue",
    "verifier_id": "2",
    "verifier_name": null,
    "update_date": "2023-11-14 20:58:41"
  },
  {
    "errata_id": "7780",
    "doc-id": "RFC9114",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "7.2.6",
    "orig_text": "The GOAWAY frame applies to the entire connection,\r\nnot a specific stream. A client MUST treat a\r\nGOAWAY frame on a stream other than the control\r\nstream as a connection error of type\r\nH3_FRAME_UNEXPECTED.",
    "correct_text": "The GOAWAY frame applies to the entire connection,\r\nnot a specific stream. An endpoint MUST treat a\r\nGOAWAY frame on a stream other than the control\r\nstream as a connection error of type\r\nH3_FRAME_UNEXPECTED.",
    "notes": "HTTP/3 originally only supported GOAWAY from server to client. In this PR we added the ability to also send GOAWAY from client to server https://github.com/quicwg/base-drafts/pull/3129/files. Unfortunately we didn't update the highlighted text to cover the situation where a server receives a GOAWAY on a different stream. \r\n\r\nFWIW the implementation I am responsible for already applies the rule to request streams.",
    "submit_date": "2024-01-24",
    "submitter_name": "Lucas Pardue",
    "verifier_id": "170",
    "verifier_name": "Francesca Palombini",
    "update_date": "2024-01-29 01:18:06"
  },
  {
    "errata_id": "8190",
    "doc-id": "RFC9114",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "7.2.6",
    "orig_text": "   The GOAWAY frame is always sent on the control stream.  In the\r\n   server-to-client direction, it carries a QUIC stream ID for a client-\r\n   initiated bidirectional stream encoded as a variable-length integer.\r\n   A client MUST treat receipt of a GOAWAY frame containing a stream ID\r\n   of any other type as a connection error of type H3_ID_ERROR.\r\n\r\n   In the client-to-server direction, the GOAWAY frame carries a push ID\r\n   encoded as a variable-length integer.\r\n",
    "correct_text": "   The GOAWAY frame is always sent on the control stream.  In the\r\n   server-to-client direction, it carries a QUIC stream ID for a client-\r\n   initiated bidirectional stream encoded as a variable-length integer.\r\n   A client MUST treat receipt of a GOAWAY frame containing a stream ID\r\n   of any other type as a connection error of type H3_ID_ERROR.\r\n\r\n   In the client-to-server direction, the GOAWAY frame carries a push ID\r\n   encoded as a variable-length integer. A server MUST treat receipt of\r\n   a GOAWAY frame containing a stream ID of any other type as a\r\n   connection error of type H3_ID_ERROR.",
    "notes": "The MUST requiring a stream error on an invalid stream ID was missing in the client-to-server direction. This is related to erratum 7780, and likely entered the spec for the same reason.",
    "submit_date": "2024-11-28",
    "submitter_name": "Cory Benfield",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  }
]

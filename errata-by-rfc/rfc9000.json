[
  {
    "errata_id": "6811",
    "doc-id": "RFC9000",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "5.1.1",
    "orig_text": "                                         The sequence number of the\r\n   initial connection ID is 0.  If the preferred_address transport\r\n   parameter is sent, the sequence number of the supplied connection ID\r\n   is 1.\r\n\r\n   Additional connection IDs are communicated to the peer using\r\n   NEW_CONNECTION_ID frames (Section 19.15).  The sequence number on\r\n   each newly issued connection ID MUST increase by 1.  ",
    "correct_text": "                                         The sequence number of the\r\n   initial connection ID is 0.  If the preferred_address transport\r\n   parameter is sent, the sequence number of the supplied connection ID\r\n   is 1.  The sequence number for NEW_CONNECTION_ID frames starts at 2\r\n   when the preferred_address transport parameter is sent and 1\r\n   otherwise.\r\n\r\n   Additional connection IDs are communicated to the peer using\r\n   NEW_CONNECTION_ID frames (Section 19.15).  The sequence number on\r\n   each newly issued connection ID MUST increase by 1.",
    "notes": "It is not sufficiently clear that the (implied) sequence number for the preferred_address transport parameter is taken from the sequence only when the transport parameter is present.\r\n\r\nThe original text might be read to imply that the first NEW_CONNECTION_ID frame always starts with 2, though maybe only at a server.  The proposed addition is much more explicit.",
    "submit_date": "2022-01-06",
    "submitter_name": "Martin Thomson",
    "verifier_id": "172",
    "verifier_name": "Zaheduzzaman Sarker",
    "update_date": "2022-02-18 02:18:41"
  },
  {
    "errata_id": "7365",
    "doc-id": "RFC9000",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "12.4.",
    "orig_text": "| 0x19       | RETIRE_CONNECTION_ID | Section 19.16 | __01 |      |",
    "correct_text": "| 0x19       | RETIRE_CONNECTION_ID | Section 19.16 | ___1 |      |",
    "notes": "Based on the context and section 12.5 ending says:\r\n\r\nNote that it is not possible to send the following frames in 0-RTT\r\n   packets for various reasons: ACK, CRYPTO, HANDSHAKE_DONE, NEW_TOKEN,\r\n   PATH_RESPONSE, and RETIRE_CONNECTION_ID.  A server MAY treat receipt\r\n   of these frames in 0-RTT packets as a connection error of type\r\n   PROTOCOL_VIOLATION.\r\n\r\nSo, I think the RETIRE_CONNECTION_ID frame should not appear in the 0-RTT packet, only contained in the 1-RTT package.",
    "submit_date": "2023-02-23",
    "submitter_name": "yongboy",
    "verifier_id": "170",
    "verifier_name": "Francesca Palombini",
    "update_date": "2024-10-30 01:45:57"
  },
  {
    "errata_id": "7374",
    "doc-id": "RFC9000",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "13.4.1",
    "orig_text": "                                                               If an\r\n   endpoint does not implement ECN support or does not have access to\r\n   received ECN fields, it does not report ECN counts for packets it\r\n   receives.\r\n\r\n   Even if an endpoint does not set an ECT field in packets it sends,\r\n   the endpoint MUST provide feedback about ECN markings it receives, if\r\n   these are accessible.  ",
    "correct_text": "                                                               If an\r\n   endpoint does not have access to\r\n   received ECN fields, it does not report ECN counts for packets it\r\n   receives.\r\n\r\n   Even if an endpoint does not set an ECT field in packets it sends,\r\n   the endpoint MUST provide feedback about ECN markings it receives, if\r\n   these are accessible.  ",
    "notes": "In the second sentence, the only allowed exception to \"MUST provide feedback about received ECN markings\" is inaccessibility. The first sentence contradicts this by allowing two exceptions: inaccessibility and just \"not implementing ECN support\". \r\n\r\nIf \"not implementing ECN support\" was really intended to be an allowed exception, the capitalized \"MUST\" would have been pointless.\r\n\r\nTherefore it is proposed that the words \"does not implement ECN support or \" are deleted from the first paragraph.\r\n\r\nNOTE : Based on discussion in https://mailarchive.ietf.org/arch/msg/quic/lsz4X-cZql71Ba56uQhNQz4NzGc/ , the error type is changed from technical to editorial.",
    "submit_date": "2023-02-27",
    "submitter_name": "Bob Briscoe",
    "verifier_id": "172",
    "verifier_name": "Zaheduzzaman Sarker",
    "update_date": "2023-05-29 06:52:02"
  },
  {
    "errata_id": "7578",
    "doc-id": "RFC9000",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "17.2.1",
    "orig_text": "                                                       Where QUIC\r\n   might be multiplexed with other protocols (see [RFC7983]), servers\r\n   SHOULD set the most significant bit of this field (0x40) to 1 so that\r\n   Version Negotiation packets appear to have the Fixed Bit field.",
    "correct_text": "                                                       Unless the\r\n   server has out-of-band knowledge that clients are not\r\n   demultiplexing QUIC with other protocols (see [RFC7983]), it\r\n   SHOULD set the most significant bit of this field (0x40) to 1 so that\r\n   Version Negotiation packets appear to have the Fixed Bit field.",
    "notes": "Unless operating in a tightly controlled environment, the server has no way of knowing what other protocols the client might be demultiplexing on the same UDP socket. According to the demultiplexing logic defined in RFC 9443, Version Negotiation packets with 0x40 set to 0 would be misclassified as RTP/RTCP.\r\n\r\nLooking at the discussion in https://mailarchive.ietf.org/arch/msg/quic/oR4kxGKY6mjtPC1CZegY1ED4beg/ and IETF118  QUIC working group meeting minutes. This needs more discussion to reach a conclusion on the potential solution.",
    "submit_date": "2023-07-30",
    "submitter_name": "Marten Seemann",
    "verifier_id": "172",
    "verifier_name": "Zaheduzzaman Sarker",
    "update_date": "2024-01-29 11:56:10"
  },
  {
    "errata_id": "7861",
    "doc-id": "RFC9000",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "8.1.2",
    "orig_text": "If a server receives a client Initial that contains an invalid Retry\r\n   token but is otherwise valid,\r\n",
    "correct_text": "If a server receives a client Initial that contains a token that is\r\n   identifiable as a Retry token, but the token is invalid or does\r\n   not otherwise validate the client's address,\r\n",
    "notes": "Valid tokens MUST be a) integrity-protected (Section 8.1.4) and distinguishable as to purpose (Section 8.1.1), i.e. tokens from a Retry packet vs. tokens from NEW_TOKEN frames. To satisfy address validation, they should enable the server to verify the client's transport address. This text does not specify which form of invalidity is being discussed -- failure of integrity protection or a mismatch between the contents of the token and the client's address.\r\n\r\nApplying this text to all \"invalid\" tokens which appear to be Retry tokens does not allow for the scenario where the token was generated by another server / another QUIC implementation and is in fact unreadable. Such tokens, even if they appear to be Retry tokens, are supposed to be handled by the requirements in 8.1.3, i.e. ignore the token and handle the packet as if no token were present.\r\n\r\nThis section should be scoped only to tokens which are correctly formatted and readable by the server, but whose contents are not sufficient to prove the client's transport address is valid. Otherwise, the determination that the token is a Retry token cannot be trusted.\r\n\r\n(This discrepancy appears in a multi-CDN context, where tokens generated by one CDN will sometimes be received by a different CDN; if these tokens appear to be \"invalid Retry tokens\", the connection is closed when the token should simply be ignored.)\r\n\r\nAlso see the discusion here (https://mailarchive.ietf.org/arch/msg/quic/-NcqDysNsU7mSXhKdCdM63MLYOc/)",
    "submit_date": "2024-03-20",
    "submitter_name": "Mike Bishop",
    "verifier_id": "172",
    "verifier_name": "Zaheduzzaman Sarker",
    "update_date": "2025-03-18 03:53:26"
  },
  {
    "errata_id": "8106",
    "doc-id": "RFC9000",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "13.2.1",
    "orig_text": "   Every packet SHOULD be acknowledged at least once, and ack-eliciting\r\n   packets MUST be acknowledged at least once within the maximum delay\r\n   an endpoint communicated using the max_ack_delay transport parameter;\r\n",
    "correct_text": "   Every packet SHOULD be acknowledged at least once, and ack-eliciting\r\n   packets MUST be acknowledged at least once. All acknowledgments MUST\r\n   occur within the maximum delay an endpoint communicated using the\r\n   max_ack_delay transport parameter;\r\n",
    "notes": "The original text can be read as if it were OK to only ACK once within the max_ack_delay, and not always.\n --VERIFIER NOTES-- \n Based on the discussion here (https://mailarchive.ietf.org/arch/msg/quic/14r68SfepLclHMnur6Ur9-F2rnY/) the errata is rejected.",
    "submit_date": "2024-09-17",
    "submitter_name": "Lars Eggert",
    "verifier_id": "172",
    "verifier_name": "Zaheduzzaman Sarker",
    "update_date": "2024-10-14 09:19:18"
  },
  {
    "errata_id": "8240",
    "doc-id": "RFC9000",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "12.4",
    "orig_text": "0x1c-0x1d   CONNECTION_CLOSE  Section 19.19  ih01  N",
    "correct_text": "0x1c-0x1d   CONNECTION_CLOSE  Section 19.19  ih01  NC",
    "notes": "QUIC congestion control RFC 9002 (https://www.rfc-editor.org/rfc/rfc9002) section 3 states:\r\n\r\n\"The types of frames contained in a packet affect recovery and congestion control logic:\r\n...\r\nPackets containing frames besides ACK or CONNECTION_CLOSE frames count toward congestion control limits and are considered to be in flight.\"\r\n\r\nSo as per RFC-9002, it means that ACK and CONNECTION_CLOSE frames do not contribute to congestion control limits.\r\n\r\nOn the other hand, RFC-9000, section 12.4 has a Table 3 (https://www.rfc-editor.org/rfc/rfc9000#frame-types) which states:\r\n\r\n\"The \"Spec\" column in Table 3 summarizes any special rules governing the processing or generation of the frame type, as indicated by the following characters:\r\n...\r\nC: Packets containing only frames with this marking do not count toward bytes in flight for congestion control purposes; see [QUIC-RECOVERY].\"\r\n\r\nHowever, in that table, the CONNECTION_CLOSE frame isn't marked with the \"C\" character and only the ACK frame is. This appears to be an oversight in that table in RFC-9000.\r\n\r\n\r\nSee related discussions here ( https://mailarchive.ietf.org/arch/msg/quic/M3j4UsFxXPS6A8EX1d2zW_ZQrMQ/ )\r\n",
    "submit_date": "2025-01-06",
    "submitter_name": "Jaikiran Pai",
    "verifier_id": "172",
    "verifier_name": "Zaheduzzaman Sarker",
    "update_date": "2025-03-18 03:39:39"
  }
]

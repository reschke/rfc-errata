[
  {
    "errata_id": "2984",
    "doc-id": "RFC2782",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "Weight",
    "orig_text": "        To select a target to be contacted next, arrange all SRV RRs\r\n        (that have not been ordered yet) in any order, except that all\r\n        those with weight 0 are placed at the beginning of the list.\r\n\r\n        Compute the sum of the weights of those RRs, and with each RR\r\n        associate the running sum in the selected order. Then choose a\r\n        uniform random number between 0 and the sum computed\r\n        (inclusive), and select the RR whose running sum value is the\r\n        first in the selected order which is greater than or equal to\r\n        the random number selected. The target host specified in the\r\n        selected SRV RR is the next one to be contacted by the client.\r\n        Remove this SRV RR from the set of the unordered SRV RRs and\r\n        apply the described algorithm to the unordered SRV RRs to select\r\n        the next target host.  Continue the ordering process until there\r\n        are no unordered SRV RRs.  This process is repeated for each\r\n        Priority.",
    "correct_text": "Correcting the text requires agreement on what to do with entries with\r\nweight=0, so I don't want to try to craft text until we have agreement there.",
    "notes": "The problem with this algorithm is that for a total weight T, it generates a random number 0..T and so allocates T+1 shares and gives the extra share to the first entry.  Thus with weights {1, 1}, the first entry is selected 2/3 of the time while the second entry is selected 1/3 of the time.\r\n\r\nI suspect that this is an attempt to do *something* with entries with weight=0, but yields unobvious results there:  for {0, 1, 1}, the three entries are each selected 1/3 of the time.\r\n\r\nI suggest:\r\n\r\n- Ordering weight=0 entries to the end.\r\n- Generating random numbers 0..(T-1).\r\n- Using a \"greater\" test rather than \"greater or equal\".\r\n- Selecting weight=0 entries in any order when all of the weight!=0 entries have been selected.\n --VERIFIER NOTES-- \nThe errata is not actionable.  Issue should be raised with the DNSEXT WG.   ",
    "submit_date": "2011-10-04",
    "submitter_name": "Jordan Brown",
    "verifier_id": "131",
    "verifier_name": "Brian Haberman",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "6600",
    "doc-id": "RFC2782",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "Fictional ex",
    "orig_text": "      ; using the sysdmin's box and the server",
    "correct_text": "      ; using the sysadmin's box and the server",
    "notes": "A typo in the \"sysdmin's\"",
    "submit_date": "2021-06-06",
    "submitter_name": "Oleksandr Chychkan",
    "verifier_id": "165",
    "verifier_name": "Erik Kline",
    "update_date": "2021-06-06 16:15:47"
  },
  {
    "errata_id": "8120",
    "doc-id": "RFC2782",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "Fictional example",
    "orig_text": "      ; foobar - use old-slow-box or new-fast-box if either is\r\n      ; available, make three quarters of the logins go to\r\n      ; new-fast-box.\r\n      _foobar._tcp    SRV 0 1 9 old-slow-box.example.com.\r\n                       SRV 0 3 9 new-fast-box.example.com.",
    "correct_text": "      ; foobar - use old-slow-box or new-fast-box if either is\r\n      ; available, make approximately three quarters of the logins\r\n      ; go to new-fast-box. The actual ratio will be between 3/5\r\n      ; and 4/5 due to how the weighing algorithm is specified.\r\n      _foobar._tcp    SRV 0 1 9 old-slow-box.example.com.\r\n                       SRV 0 3 9 new-fast-box.example.com.",
    "notes": "The comment in the fictional example does not match the weighing algorithm described in the Weight section. Because the running sum is used to generate a random number from 0 to the sum (inclusive), there are (sum + 1) possibilities of the outcome. In the absence of 0-weight records, the first record receives increased pick-chance. A similar concern was brought up in the (rejected) Errata ID: 2984 for RFC2782, which was for the weight section. This errata is for the example only.\r\n\r\nThe ordering of the records is not specified, for non-zero weight records it is explicitly \"any order\". Thus, for weights 3 and 1, a conforming implementation may:\r\n1) always sort the 1-weight record first, and obtain 2/5 and 3/5 probabilities for 1 and 3 respectively\r\n2) always sort the 3-weight record first, and obtain 1/5 and 4/5 probabilities for 1 and 3 respectively\r\n3) have an random sorting method, obtaining probabilities anywhere between the two above. If a fair random shuffle is used, the probabilities will be 3/10 and 7/10 (the average of 1 and 2 above).\r\n\r\nIt is unlikely for the distribution of results for weights 1 and 3 to be 1/4 and 3/4. This quirk of the algorithm is not obvious, and the example could do better at indicating the factual state. As it is, it is misleading. It is significant in that it may lead someone to believe an implementation is incorrect (not achieving the expected 1/4-3/4 split) when it is implementing the weights algorithm exactly as in the Weights section.",
    "submit_date": "2024-09-25",
    "submitter_name": "Tomasz Śniatowski",
    "verifier_id": "161",
    "verifier_name": "Éric Vyncke",
    "update_date": "2025-06-27 00:57:36"
  }
]

[
  {
    "errata_id": "3604",
    "doc-id": "RFC6891",
    "errata_status_code": "Verified",
    "errata_type_code": "Editorial",
    "section": "9.1",
    "orig_text": "9.1.  OPT Option Code Allocation Procedure\r\n\r\n  OPT Option Codes are assigned by Expert Review.\r\n\r\n  Assignment of Option Codes should be liberal, but duplicate\r\n  functionality is to be avoided.",
    "correct_text": "9.1.  DNS EDNS0 Option Code Changes\r\n\r\n  This document modifies the name of the existing registry DNS EDNS0 \r\n  Options to DNS EDNS0 Option Codes (OPT) and updates the registration\r\n  procedures to Expert Review.\r\n\r\n  Assignment of Option Codes should be liberal, but duplicate\r\n  functionality is to be avoided.",
    "notes": "In the publication process fixing this one minor mistake in clarifying the name of the registry fell through the cracks, the consequence of this is that IANA needs this errata to clarify the registry name.",
    "submit_date": "2013-04-24",
    "submitter_name": "Olafur Gudmundsson",
    "verifier_id": "134",
    "verifier_name": "Ted Lemon",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "6982",
    "doc-id": "RFC6891",
    "errata_status_code": "Rejected",
    "errata_type_code": "Technical",
    "section": "4.3",
    "orig_text": "Traditional DNS messages are limited to 512 octets in size when sent over UDP [RFC1035]. Fitting the increasing amounts of data that can be transported in DNS in this 512-byte limit is becoming more difficult. For instance, inclusion of DNSSEC records frequently requires a much larger response than a 512-byte message can hold.",
    "correct_text": "Traditional DNS messages are limited to 512-bytes in size when sent over UDP [RFC1035]. Fitting the increasing amounts of data that can be transported in DNS in this 512-byte limit is becoming more difficult. For instance, inclusion of DNSSEC records frequently\r\n requires a much larger response than a 512-byte message can hold.",
    "notes": "In the original text, it says: DNS messages are limited to 512 octets in size, but it should be 512 bytes not octets.\r\n\r\n\n --VERIFIER NOTES-- \n   Most RFCs use \"octets\" and \"bytes\" as equivalent (even if I personally prefer \"octets\").",
    "submit_date": "2022-05-29",
    "submitter_name": "Avninder Sran",
    "verifier_id": "161",
    "verifier_name": "Eric Vyncke",
    "update_date": "2022-05-29 21:56:28"
  },
  {
    "errata_id": "8348",
    "doc-id": "RFC6891",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "6.1.2",
    "orig_text": "   The fixed part of an OPT RR is structured as follows:\r\n\r\n       +------------+--------------+------------------------------+\r\n       | Field Name | Field Type   | Description                  |\r\n       +------------+--------------+------------------------------+\r\n       | NAME       | domain name  | MUST be 0 (root domain)      |\r\n       | TYPE       | u_int16_t    | OPT (41)                     |\r\n       | CLASS      | u_int16_t    | requestor's UDP payload size |\r\n       | TTL        | u_int32_t    | extended RCODE and flags     |\r\n       | RDLEN      | u_int16_t    | length of all RDATA          |\r\n       | RDATA      | octet stream | {attribute,value} pairs      |\r\n       +------------+--------------+------------------------------+",
    "correct_text": "   The fixed part of an OPT RR is structured as follows:\r\n\r\n       +------------+--------------+------------------------------+\r\n       | Field Name | Field Type   | Description                  |\r\n       +------------+--------------+------------------------------+\r\n       | NAME       | domain name  | MUST be 0 (root domain)      |\r\n       | TYPE       | u_int16_t    | OPT (41)                     |\r\n       | CLASS      | u_int16_t    | sender's UDP payload size    |\r\n       | TTL        | u_int32_t    | extended RCODE and flags     |\r\n       | RDLEN      | u_int16_t    | length of all RDATA          |\r\n       | RDATA      | octet stream | {attribute,value} pairs      |\r\n       +------------+--------------+------------------------------+",
    "notes": "This restores the definition of EDNS0's OPT CLASS field as \"sender's UDP payload size\" as it appeared in RFC 2671 rather than \"requestor's UDP payload size\" which appeared in RFC 6891 (specifically it appears to have been introduced in draft-ietf-dnsext-rfc2671bis-edns0-02).\r\n\r\nThe requestor is not the same as the sender. The requestor is the protocol endpoint that sends the DNS query message and receives the DNS response message, while the responder is the protocol endpoint that receives the DNS query message and sends the DNS response message. The requestor is the sender when it sends its DNS query message to the responder, and the responder is the sender when it sends its DNS response message to the requestor.\r\n\r\n6891 specifically defines requestor/responder as:\r\n\r\n   \"Requestor\" refers to the side that sends a request.  \"Responder\"\r\n   refers to an authoritative, recursive resolver or other DNS component\r\n   that responds to questions.\r\n\r\n6891's definition of the OPT CLASS field as the \"requestor's UDP payload size\" thus literally means that the responder should copy the requestor's UDP payload size into the OPT CLASS field in the response message that the responder sends. There would then be no place in the packet for the responder to place the responder's UDP payload size, and besides, the requestor doesn't need this information since it already knows its own payload size. This is not consistent with the EDNS0 protocol as a whole, which involves the protocol endpoints (requestor and responder) learning each other's maximum UDP payload sizes, for instance 6891 section 6.2.4:\r\n\r\n   The responder's maximum payload size can change over time but can\r\n   reasonably be expected to remain constant between two closely spaced\r\n   sequential transactions, for example, an arbitrary QUERY used as a\r\n   probe to discover a responder's maximum UDP payload size, followed\r\n   immediately by an UPDATE that takes advantage of this size.\r\n\r\nIn practice, I believe modern EDNS0 responder implementations follow the earlier definition from 2671 and the \"requestor's UDP payload size\" definition in 6891 is a drafting mistake.\r\n\r\nThanks!",
    "submit_date": "2025-03-27",
    "submitter_name": "Robert Edmonds",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  }
]

[
  {
    "errata_id": "5710",
    "doc-id": "RFC8392",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "1.1",
    "orig_text": "In JSON, maps are called objects and only have one kind of map key: a\r\n   string.  CBOR uses strings, negative integers, and unsigned integers\r\n   as map keys.",
    "correct_text": "In JSON, maps are called objects and only have one kind of map key:\r\na string.  CBOR allows other data types, such as strings, negative\r\nintegers, and unsigned integers, as map keys.",
    "notes": "The text as it stands risks an interpretation that CBOR limits map keys to integers and strings; per discussion on the CBOR mailing list, this is not the case.",
    "submit_date": "2019-04-29",
    "submitter_name": "Felipe Gasper",
    "verifier_id": "173",
    "verifier_name": "Paul Wouters",
    "update_date": "2024-01-16 18:22:25"
  },
  {
    "errata_id": "5852",
    "doc-id": "RFC8392",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Editorial",
    "section": "A.3",
    "orig_text": "   d28443a10126a104524173796d6d657472696345434453413235365850a701756\r\n   36f61703a2f2f61732e6578616d706c652e636f6d02656572696b77037818636f\r\n   61703a2f2f6c696768742e6578616d706c652e636f6d041a5612aeb0051a5610d\r\n   9f0061a5610d9f007420b7158405427c1ff28d23fbad1f29c4c7c6a555e601d6f\r\n   a29f9179bc3d7438bacaca5acd08c8d4d4f96131680c429a01f85951ecee743a5\r\n   2b9b63632c57209120e1c9e30",
    "correct_text": "   d28443a10126a104524173796d6d657472696345434453413235365850a70175\r\n   636f61703a2f2f61732e6578616d706c652e636f6d02656572696b7703781863\r\n   6f61703a2f2f6c696768742e6578616d706c652e636f6d041a5612aeb0051a56\r\n   10d9f0061a5610d9f007420b7158405427c1ff28d23fbad1f29c4c7c6a555e60\r\n   1d6fa29f9179bc3d7438bacaca5acd08c8d4d4f96131680c429a01f85951ecee\r\n   743a52b9b63632c57209120e1c9e30",
    "notes": "The ASCII representation of binary bytes in Figure 10 is wrapped\r\non an odd number of ASCII characters. Since there are two ASCII\r\ncharacters per binary bytes this splits the last byte over two\r\nlines. \r\n\r\nThe CBOR playground (http://cbor.me) cannot handle this and\r\nerrors out. \r\n\r\nThis is slightly confusing for readers.\r\n\r\nThe actual bytes values are correct by all the checks I did.",
    "submit_date": "2019-09-03",
    "submitter_name": "Laurence Lundblade",
    "verifier_id": "159",
    "verifier_name": "Benjamin Kaduk",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "7982",
    "doc-id": "RFC8392",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "A.2.2",
    "orig_text": "     / kid /  4: h'53796d6d6574726963323536' / 'Symmetric256' /,",
    "correct_text": "     / kid /  2: h'53796d6d6574726963323536' / 'Symmetric256' /,",
    "notes": "The hex above the diagnostic notation encodes for index 2 before the 'Symmetric256' value. The use of CBOR value 2 to mean \"kid\" is also consistent with the examples around it.\r\n\r\nAs this is a mix-up between the \"kid\" key from COSE Key Common Parameters and COSE Header parameters, a check through the whole document for whether the right numeric values are used might be due. The use of 2 here and 4 in A.3 and A.4 seems right to me -- but I keep mixing those up myself, which was why I was looking into this example in the first place.",
    "submit_date": "2024-06-11",
    "submitter_name": "Christian Ams√ºss",
    "verifier_id": "2",
    "verifier_name": null,
    "update_date": "2024-06-11 09:39:34"
  },
  {
    "errata_id": "8617",
    "doc-id": "RFC8392",
    "errata_status_code": "Reported",
    "errata_type_code": "Technical",
    "section": "2",
    "orig_text": "   NumericDate\r\n      The \"NumericDate\" term in this specification has the same meaning\r\n      and processing rules as the JWT \"NumericDate\" term defined in\r\n      Section 2 of [RFC7519], except that it is represented as a CBOR\r\n      numeric date (from Section 2.4.1 of [RFC7049]) instead of a JSON\r\n      number.  The encoding is modified so that the leading tag 1\r\n      (epoch-based date/time) MUST be omitted.\r\n",
    "correct_text": "   NumericDate\r\n      The \"NumericDate\" term in this specification has the same meaning\r\n      and processing rules as the JWT \"NumericDate\" term defined in\r\n      Section 2 of [RFC7519], except that it is represented as a finite\r\n      CBOR numeric date (from Section 2.4.1 of [RFC7049]) instead of a\r\n      JSON number.  The encoding is modified so that the leading tag 1\r\n      (epoch-based date/time) MUST be omitted.",
    "notes": "Section 2.4.1 of RFC7049 says that the value is a negative or positive integer or a floating point *number* (which does not include NaN floating pointing point values), but it does not say anything about floating point positive and negative infinity. This is likely to be missed by most implementers of RFC 8392.\r\n\r\n\r\nA JWT \"NumericDate\" was intended to mimic a value which can be expressed in JSON. JSON does not allow infinite values.\r\n\r\nIn addition, exp, nbf, and iat all share the same type. The iat is the \"issued at\" date. The idea of a creation date with an infinite value is nonsensical.",
    "submit_date": "2025-10-29",
    "submitter_name": "Rohan Mahy",
    "verifier_id": "99",
    "verifier_name": null,
    "update_date": null
  }
]

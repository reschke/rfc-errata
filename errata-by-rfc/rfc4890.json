[
  {
    "errata_id": "2706",
    "doc-id": "RFC4890",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "Appendix B.",
    "orig_text": "   if [ \"$STATE_ENABLED\" -eq \"1\" ]\r\n   then\r\n     # Allow incoming time exceeded code 0 messages\r\n     # only for existing sessions\r\n     for inner_prefix in $INNER_PREFIXES\r\n     do\r\n       ip6tables -A icmpv6-filter -m state -p icmpv6 \\\r\n            -d $inner_prefix \\\r\n            --state ESTABLISHED,RELATED --icmpv6-type packet-too-big \\\r\n            -j ACCEPT\r\n     done\r\n   else\r\n     # Allow incoming time exceeded code 0 messages\r\n     for inner_prefix in $INNER_PREFIXES\r\n     do\r\n       ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \\\r\n            --icmpv6-type ttl-zero-during-transit -j ACCEPT\r\n     done\r\n   fi\r\n",
    "correct_text": "   if [ \"$STATE_ENABLED\" -eq \"1\" ]\r\n   then\r\n     # Allow incoming time exceeded code 0 messages\r\n     # only for existing sessions\r\n     for inner_prefix in $INNER_PREFIXES\r\n     do\r\n       ip6tables -A icmpv6-filter -m state -p icmpv6 \\\r\n            -d $inner_prefix \\\r\n            --state ESTABLISHED,RELATED --icmpv6-type ttl-zero-during-transmit \\\r\n            -j ACCEPT\r\n     done\r\n   else\r\n     # Allow incoming time exceeded code 0 messages\r\n     for inner_prefix in $INNER_PREFIXES\r\n     do\r\n       ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \\\r\n            --icmpv6-type ttl-zero-during-transit -j ACCEPT\r\n     done\r\n   fi\r\n",
    "notes": "Not sure if this is really editorial as it is in the example code, not the main RFC.\r\n\r\nIn any case, the example incorrectly specifies an icmpv6 type in one code path.",
    "submit_date": "2011-02-06",
    "submitter_name": "Phil Whineray",
    "verifier_id": "105",
    "verifier_name": "ron bonica",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "3985",
    "doc-id": "RFC4890",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "Appendix B",
    "orig_text": "if [ \"$STATE_ENABLED\" -eq \"1\" ]\r\nthen\r\n  # Allow incoming time exceeded code 0 messages\r\n  # only for existing sessions\r\n  for inner_prefix in $INNER_PREFIXES\r\n  do\r\n    ip6tables -A icmpv6-filter -m state -p icmpv6 \\\r\n         -d $inner_prefix \\\r\n         --state ESTABLISHED,RELATED --icmpv6-type packet-too-big \\\r\n         -j ACCEPT\r\n  done\r\nelse\r\n  # Allow incoming time exceeded code 0 messages\r\n  for inner_prefix in $INNER_PREFIXES\r\n  do\r\n    ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \\\r\n         --icmpv6-type ttl-zero-during-transit -j ACCEPT\r\n  done\r\nfi",
    "correct_text": "if [ \"$STATE_ENABLED\" -eq \"1\" ]\r\nthen\r\n  # Allow incoming time exceeded code 0 messages\r\n  # only for existing sessions\r\n  for inner_prefix in $INNER_PREFIXES\r\n  do\r\n    ip6tables -A icmpv6-filter -m state -p icmpv6 \\\r\n     -d $inner_prefix \\\r\n     --state ESTABLISHED,RELATED --icmpv6-type ttl-zero-during-transit \\\r\n     -j ACCEPT\r\n  done\r\nelse\r\n  # Allow incoming time exceeded code 0 messages\r\n  for inner_prefix in $INNER_PREFIXES\r\n  do\r\n    ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \\\r\n         --icmpv6-type ttl-zero-during-transit -j ACCEPT\r\n  done\r\nfi",
    "notes": "RFC 4890 Errata ID 2706 states that icmpv6-type packet-too-big should\r\nstate icmpv6-type ttl-zero-during-transmit. This should read\r\nttl-zero-during-transit.",
    "submit_date": "2014-05-13",
    "submitter_name": "James Robertson",
    "verifier_id": "135",
    "verifier_name": "Joel Jaeggli",
    "update_date": "2019-09-10 09:09:03"
  },
  {
    "errata_id": "7922",
    "doc-id": "RFC4890",
    "errata_status_code": "Held for Document Update",
    "errata_type_code": "Technical",
    "section": "Appendix B",
    "orig_text": "#!/bin/bash\r\n# Set of prefixes on the trusted (\"inner\") side of the firewall\r\nexport INNER_PREFIXES=\"2001:DB8:85::/60\"\r\n# Set of hosts providing services so that they can be made pingable\r\nexport PINGABLE_HOSTS=\"2001:DB8:85::/64\"\r\n# Configuration option: Change this to 1 if errors allowed only for\r\n# existing sessions\r\nexport STATE_ENABLED=0\r\n# Configuration option: Change this to 1 if messages to/from link\r\n# local addresses should be filtered.\r\n# Do not use this if the firewall is a bridge.\r\n# Optional for firewalls that are routers.\r\nexport FILTER_LINK_LOCAL_ADDRS=0\r\n# Configuration option: Change this to 0 if the site does not support\r\n# Mobile IPv6 Home Agents - see Appendix A.14\r\nexport HOME_AGENTS_PRESENT=1\r\n# Configuration option: Change this to 0 if the site does not support\r\n# Mobile IPv6 mobile nodes being present on the site -\r\n# see Appendix A.14\r\nexport MOBILE_NODES_PRESENT=1\r\n\r\nip6tables -N icmpv6-filter\r\nip6tables -A FORWARD -p icmpv6 -j icmpv6-filter\r\n\r\n# Match scope of src and dest else deny\r\n# This capability is not provided for in base ip6tables functionality\r\n# An extension (agr) exists which may support it.\r\n#@TODO@\r\n# ECHO REQUESTS AND RESPONSES\r\n# ===========================\r\n\r\n# Allow outbound echo requests from prefixes which belong to the site\r\nfor inner_prefix in $INNER_PREFIXES\r\ndo\r\n  ip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \\\r\n        --icmpv6-type echo-request -j ACCEPT\r\ndone\r\n\r\n# Allow inbound echo requests towards only predetermined hosts\r\nfor pingable_host in $PINGABLE_HOSTS\r\ndo\r\n  ip6tables -A icmpv6-filter -p icmpv6 -d $pingable_host \\\r\n        --icmpv6-type echo-request -j ACCEPT\r\ndone\r\n\r\nif [ \"$STATE_ENABLED\" -eq \"1\" ]\r\nthen\r\n  # Allow incoming and outgoing echo reply messages\r\n  # only for existing sessions\r\n  ip6tables -A icmpv6-filter -m state -p icmpv6 \\\r\n        --state ESTABLISHED,RELATED --icmpv6-type \\\r\n      echo-reply -j ACCEPT\r\nelse\r\n  # Allow both incoming and outgoing echo replies\r\n  for pingable_host in $PINGABLE_HOSTS\r\n  do\r\n    # Outgoing echo replies from pingable hosts\r\n    ip6tables -A icmpv6-filter -p icmpv6 -s $pingable_host \\\r\n        --icmpv6-type echo-reply -j ACCEPT\r\n  done\r\n  # Incoming echo replies to prefixes which belong to the site\r\n  for inner_prefix in $INNER_PREFIXES\r\n  do\r\n    ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \\\r\n        --icmpv6-type echo-reply -j ACCEPT\r\n  done\r\nfi\r\n\r\n# Deny icmps to/from link local addresses\r\n# If the firewall is a router:\r\n#    These rules should be redundant as routers should not forward\r\n#    link local addresses but to be sure...\r\n# DO NOT ENABLE these rules if the firewall is a bridge\r\nif [ \"$FILTER_LINK_LOCAL_ADDRS\" -eq \"1\" ]\r\nthen\r\n  ip6tables -A icmpv6-filter -p icmpv6 -d fe80::/10 -j DROP\r\n  ip6tables -A icmpv6-filter -p icmpv6 -s fe80::/10 -j DROP\r\nfi\r\n\r\n# Drop echo replies which have a multicast address as a\r\n# destination\r\nip6tables -A icmpv6-filter -p icmpv6 -d ff00::/8 \\\r\n        --icmpv6-type echo-reply -j DROP\r\n\r\n# DESTINATION UNREACHABLE ERROR MESSAGES\r\n# ======================================\r\n\r\nif [ \"$STATE_ENABLED\" -eq \"1\" ]\r\nthen\r\n  # Allow incoming destination unreachable messages\r\n  # only for existing sessions\r\n  for inner_prefix in $INNER_PREFIXES\r\n  do\r\n    ip6tables -A icmpv6-filter -m state -p icmpv6 \\\r\n         -d $inner_prefix \\\r\n         --state ESTABLISHED,RELATED --icmpv6-type \\\r\n         destination-unreachable -j ACCEPT\r\n  done\r\nelse\r\n  # Allow incoming destination unreachable messages\r\n  for inner_prefix in $INNER_PREFIXES\r\n  do\r\n    ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \\\r\n         --icmpv6-type destination-unreachable -j ACCEPT\r\n  done\r\nfi\r\n\r\n# Allow outgoing destination unreachable messages\r\nfor inner_prefix in $INNER_PREFIXES\r\ndo\r\n  ip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \\\r\n         --icmpv6-type destination-unreachable -j ACCEPT\r\ndone\r\n\r\n# PACKET TOO BIG ERROR MESSAGES\r\n# =============================\r\n\r\nif [ \"$STATE_ENABLED\" -eq \"1\" ]\r\nthen\r\n  # Allow incoming Packet Too Big messages\r\n  # only for existing sessions\r\n  for inner_prefix in $INNER_PREFIXES\r\n  do\r\n    ip6tables -A icmpv6-filter -m state -p icmpv6 \\\r\n         -d $inner_prefix \\\r\n         --state ESTABLISHED,RELATED \\\r\n         --icmpv6-type packet-too-big \\\r\n         -j ACCEPT\r\n  done\r\nelse\r\n  # Allow incoming Packet Too Big messages\r\n  for inner_prefix in $INNER_PREFIXES\r\n  do\r\n    ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \\\r\n         --icmpv6-type packet-too-big -j ACCEPT\r\n  done\r\nfi\r\n\r\n# Allow outgoing Packet Too Big messages\r\nfor inner_prefix in $INNER_PREFIXES\r\ndo\r\n  ip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \\\r\n         --icmpv6-type packet-too-big -j ACCEPT\r\ndone\r\n\r\n# TIME EXCEEDED ERROR MESSAGES\r\n# ============================\r\n\r\nif [ \"$STATE_ENABLED\" -eq \"1\" ]\r\nthen\r\n  # Allow incoming time exceeded code 0 messages\r\n  # only for existing sessions\r\n  for inner_prefix in $INNER_PREFIXES\r\n  do\r\n    ip6tables -A icmpv6-filter -m state -p icmpv6 \\\r\n         -d $inner_prefix \\\r\n         --state ESTABLISHED,RELATED --icmpv6-type packet-too-big \\\r\n         -j ACCEPT\r\n  done\r\nelse\r\n  # Allow incoming time exceeded code 0 messages\r\n  for inner_prefix in $INNER_PREFIXES\r\n  do\r\n    ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \\\r\n         --icmpv6-type ttl-zero-during-transit -j ACCEPT\r\n  done\r\nfi\r\n\r\n#@POLICY@\r\n# Allow incoming time exceeded code 1 messages\r\nfor inner_prefix in $INNER_PREFIXES\r\ndo\r\nip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \\\r\n         --icmpv6-type ttl-zero-during-reassembly -j ACCEPT\r\ndone\r\n\r\n# Allow outgoing time exceeded code 0 messages\r\nfor inner_prefix in $INNER_PREFIXES\r\ndo\r\nip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \\\r\n         --icmpv6-type ttl-zero-during-transit -j ACCEPT\r\ndone\r\n\r\n#@POLICY@\r\n# Allow outgoing time exceeded code 1 messages\r\nfor inner_prefix in $INNER_PREFIXES\r\ndo\r\nip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \\\r\n         --icmpv6-type ttl-zero-during-reassembly -j ACCEPT\r\ndone\r\n\r\n# PARAMETER PROBLEM ERROR MESSAGES\r\n# ================================\r\n\r\nif [ \"$STATE_ENABLED\" -eq \"1\" ]\r\nthen\r\n  # Allow incoming parameter problem code 1 and 2 messages\r\n  # for an existing session\r\n  for inner_prefix in $INNER_PREFIXES\r\n  do\r\n    ip6tables -A icmpv6-filter -m state -p icmpv6 \\\r\n         -d $inner_prefix \\\r\n         --state ESTABLISHED,RELATED --icmpv6-type \\\r\n         unknown-header-type \\\r\n         -j ACCEPT\r\n    ip6tables -A icmpv6-filter -m state -p icmpv6 \\\r\n         -d $inner_prefix \\\r\n         --state ESTABLISHED,RELATED \\\r\n         --icmpv6-type unknown-option \\\r\n         -j ACCEPT\r\n  done\r\nfi\r\n\r\n# Allow outgoing parameter problem code 1 and code 2 messages\r\nfor inner_prefix in $INNER_PREFIXES\r\ndo\r\n  ip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \\\r\n         --icmpv6-type unknown-header-type -j ACCEPT\r\n  ip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \\\r\n         --icmpv6-type unknown-option -j ACCEPT\r\ndone\r\n\r\n#@POLICY@\r\n# Allow incoming and outgoing parameter\r\n# problem code 0 messages\r\nfor inner_prefix in $INNER_PREFIXES\r\ndo\r\n  ip6tables -A icmpv6-filter -p icmpv6 \\\r\n         --icmpv6-type bad-header \\\r\n         -j ACCEPT\r\ndone\r\n\r\n# NEIGHBOR DISCOVERY MESSAGES\r\n# ===========================\r\n\r\n# Drop NS/NA messages both incoming and outgoing\r\nip6tables -A icmpv6-filter -p icmpv6 \\\r\n         --icmpv6-type neighbor-solicitation -j DROP\r\nip6tables -A icmpv6-filter -p icmpv6 \\\r\n         --icmpv6-type neighbor-advertisement -j DROP\r\n\r\n# Drop RS/RA messages both incoming and outgoing\r\nip6tables -A icmpv6-filter -p icmpv6 \\\r\n         --icmpv6-type router-solicitation -j DROP\r\nip6tables -A icmpv6-filter -p icmpv6 \\\r\n         --icmpv6-type router-advertisement -j DROP\r\n\r\n# Drop Redirect messages both incoming and outgoing\r\nip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type redirect -j DROP\r\n\r\n# MLD MESSAGES\r\n# ============\r\n\r\n# Drop incoming and outgoing\r\n# Multicast Listener queries (MLDv1 and MLDv2)\r\nip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type 130 -j DROP\r\n\r\n# Drop incoming and outgoing Multicast Listener reports (MLDv1)\r\nip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type 131 -j DROP\r\n\r\n# Drop incoming and outgoing Multicast Listener Done messages (MLDv1)\r\nip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type 132 -j DROP\r\n\r\n# Drop incoming and outgoing Multicast Listener reports (MLDv2)\r\nip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type 143 -j DROP\r\n\r\n# ROUTER RENUMBERING MESSAGES\r\n# ===========================\r\n\r\n# Drop router renumbering messages\r\nip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type 138 -j DROP\r\n\r\n# NODE INFORMATION QUERIES\r\n# ========================\r\n\r\n# Drop node information queries (139) and replies (140)\r\nip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type 139 -j DROP\r\nip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type 140 -j DROP\r\n\r\n# MOBILE IPv6 MESSAGES\r\n# ====================\r\n\r\n# If there are mobile ipv6 home agents present on the\r\n# trusted side allow\r\nif [ \"$HOME_AGENTS_PRESENT\" -eq \"1\" ]\r\nthen\r\n  for inner_prefix in $INNER_PREFIXES\r\n  do\r\n    #incoming Home Agent address discovery request\r\n    ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \\\r\n         --icmpv6-type 144 -j ACCEPT\r\n    #outgoing Home Agent address discovery reply\r\n    ip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \\\r\n         --icmpv6-type 145 -j ACCEPT\r\n    #incoming Mobile prefix solicitation\r\n    ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \\\r\n         --icmpv6-type 146 -j ACCEPT\r\n    #outgoing Mobile prefix advertisement\r\n    ip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \\\r\n         --icmpv6-type 147 -j ACCEPT\r\n  done\r\nfi\r\n\r\n# If there are roaming mobile nodes present on the\r\n# trusted side allow\r\nif [ \"$MOBILE_NODES_PRESENT\" -eq \"1\" ]\r\nthen\r\n  for inner_prefix in $INNER_PREFIXES\r\n  do\r\n    #outgoing Home Agent address discovery request\r\n    ip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \\\r\n         --icmpv6-type 144 -j ACCEPT\r\n    #incoming Home Agent address discovery reply\r\n    ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \\\r\n         --icmpv6-type 145 -j ACCEPT\r\n    #outgoing Mobile prefix solicitation\r\n    ip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \\\r\n         --icmpv6-type 146 -j ACCEPT\r\n    #incoming Mobile prefix advertisement\r\n    ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \\\r\n         --icmpv6-type 147 -j ACCEPT\r\n  done\r\nfi\r\n\r\n# DROP EVERYTHING ELSE\r\n# ====================\r\n\r\nip6tables -A icmpv6-filter -p icmpv6 -j DROP\r\n",
    "correct_text": "#!/bin/bash\r\n\r\n# Prefixes on the trusted (\"inner\") side of the firewall\r\nreadonly inner_prefixes=( \"2001:db8:85::/60\" )\r\n\r\n# Hosts providing services so that they can be made pingable\r\nreadonly pingable_hosts=( \"2001:db8:85::/64\" )\r\n\r\n# 1 - if errors are allowed only for existing sessions\r\nreadonly state_enabled=0\r\n\r\n# 1 - if messages to/from link local addresses should be filtered\r\n# Do not use this if the firewall is a bridge.\r\n# Optional for firewalls that are routers.\r\nreadonly filter_linklocal_addrs=0\r\n\r\n# 0 - if the site does not support Mobile IPv6 Home Agents\r\n# 1 - if there are mobile ipv6 home agents present on the trusted side\r\n# see Appendix A.14\r\nreadonly home_agents_present=1\r\n\r\n# 0 - if the site does not support Mobile IPv6 mobile nodes\r\n# 1 - if there are roaming mobile nodes present on the trusted side\r\n# see Appendix A.14\r\nreadonly mobile_nodes_present=1\r\n\r\nip6tables -N icmpv6-filter\r\nip6tables -A FORWARD -p icmpv6 -j icmpv6-filter\r\n\r\nstate_args=(\r\n\t'--match' 'state'\r\n\t'--state' 'ESTABLISHED,RELATED'\r\n)\r\n(( state_enabled == 0 )) && state_args=()\r\nreadonly state_args\r\n\r\n# Helper functions\r\nfilter() { ip6tables -A icmpv6-filter -p icmpv6\t\"${@}\"; }\r\naccept() { filter \"${@}\" -j ACCEPT; }\r\ndrop()   { filter \"${@}\" -j DROP; }\r\n\r\n# Match scope of src and dest else deny\r\n# This capability is not provided for in base ip6tables functionality\r\n# An extension (agr) exists which may support it.\r\n#@TODO@\r\n\r\n# ECHO REQUESTS AND RESPONSES\r\n# ===========================\r\n\r\n# Outbound echo requests from prefixes belonging to the site\r\nfor inner_prefix in \"${inner_prefixes[@]}\"; do\r\n\taccept \\\r\n\t\t-s \"${inner_prefix}\" \\\r\n\t\t--icmpv6-type echo-request\r\ndone\r\n\r\n# Inbound echo requests only towards predetermined hosts\r\nfor pingable_host in \"${pingable_hosts[@]}\"; do\r\n\taccept \\\r\n\t\t-d \"${pingable_host}\" \\\r\n\t\t--icmpv6-type echo-request\r\ndone\r\n\r\nif (( state_enabled == 1 )); then\r\n\t# Incoming and outgoing messages\r\n\t# only for existing sessions\r\n\taccept \\\r\n\t\t\"${state_args[@]}\" \\\r\n\t\t--icmpv6-type echo-reply\r\nelse\r\n\t# Both incoming and outgoing echo replies\r\n\tfor pingable_host in \"${pingable_hosts[@]}\"; do\r\n\t\t# Outgoing echo replies from pingable hosts\r\n\t\taccept \\\r\n\t\t\t-s \"${pingable_host}\" \\\r\n\t\t\t--icmpv6-type echo-reply\r\n\tdone\r\n\r\n\t# Incoming echo replies to prefixes belonging to the site\r\n\tfor inner_prefix in \"${inner_prefixes[@]}\"; do\r\n\t\taccept \\\r\n\t\t\t-d \"${inner_prefix}\" \\\r\n\t\t\t--icmpv6-type echo-reply\r\n\tdone\r\nfi\r\n\r\n# Deny icmps to/from link local addresses\r\n# If the firewall is a router:\r\n#    These rules should be redundant as routers should not forward\r\n#    link local addresses but to be sure...\r\n# DO NOT ENABLE these rules if the firewall is a bridge\r\nif (( filter_linklocal_addrs == 1 )); then\r\n\tdrop -d fe80::/10\r\n\tdrop -s fe80::/10\r\nfi\r\n\r\n# No echo replies for multicast destination addresses\r\ndrop \\\r\n\t-d ff00::/8 \\\r\n\t--icmpv6-type echo-reply\r\n\r\nfor inner_prefix in \"${inner_prefixes[@]}\"; do\r\n\t# DESTINATION UNREACHABLE ERROR MESSAGES\r\n\t# ======================================\r\n\r\n\t# incoming\r\n\taccept \\\r\n\t\t-d \"${inner_prefix}\" \\\r\n\t\t\"${state_args[@]}\" \\\r\n\t\t--icmpv6-type destination-unreachable\r\n\r\n\t# outgoing\r\n\taccept \\\r\n\t\t-s \"${inner_prefix}\" \\\r\n\t\t--icmpv6-type destination-unreachable\r\n\r\n\t# PACKET TOO BIG ERROR MESSAGES\r\n\t# =============================\r\n\r\n\t# incoming\r\n\taccept \\\r\n\t\t-d \"${inner_prefix}\" \\\r\n\t\t\"${state_args[@]}\" \\\r\n\t\t--icmpv6-type packet-too-big\r\n\r\n\t# outgoing\r\n\taccept \\\r\n\t\t-s \"${inner_prefix}\" \\\r\n\t\t--icmpv6-type packet-too-big\r\n\r\n\t# TIME EXCEEDED ERROR MESSAGES\r\n\t# ============================\r\n\r\n\t# incoming w/ code 0\r\n\taccept \\\r\n\t\t-d \"${inner_prefix}\" \\\r\n\t\t\"${state_args[@]}\" \\\r\n\t\t--icmpv6-type 3/0\r\n\r\n\t# @POLICY@\r\n\t# incoming w/ code 1\r\n\taccept \\\r\n\t\t-d \"${inner_prefix}\" \\\r\n\t\t--icmpv6-type 3/1\r\n\r\n\t# outgoing w/ code 0\r\n\taccept \\\r\n\t\t-s \"${inner_prefix}\" \\\r\n\t\t--icmpv6-type 3/0\r\n\r\n\t# @POLICY@\r\n\t# outgoing w/ code 1\r\n\taccept \\\r\n\t\t-s \"${inner_prefix}\" \\\r\n\t\t--icmpv6-type 3/1\r\n\r\n\t# PARAMETER PROBLEM ERROR MESSAGES\r\n\t# ================================\r\n\r\n\tif (( state_enabled == 1 )); then\r\n\t\t# incoming\r\n\t\taccept \\\r\n\t\t\t-d \"${inner_prefix}\" \\\r\n\t\t\t\"${state_args[@]}\" \\\r\n\t\t\t--icmpv6-type 4/1\r\n\r\n\t\taccept \\\r\n\t\t\t-d \"${inner_prefix}\" \\\r\n\t\t\t\"${state_args[@]}\" \\\r\n\t\t\t--icmpv6-type 4/2\r\n\tfi\r\n\r\n\t# outgoing\r\n\taccept \\\r\n\t\t-s \"${inner_prefix}\" \\\r\n\t\t--icmpv6-type 4/1\r\n\r\n\taccept \\\r\n\t\t-s \"${inner_prefix}\" \\\r\n\t\t--icmpv6-type 4/2\r\n\r\n\t# @POLICY@\r\n\t# incoming and outgoing\r\n\taccept --icmpv6-type 4/0\r\ndone\r\n\r\n# Drop all these, both incoming and outgoing\r\ntypes=(\r\n\t# NEIGHBOR DISCOVERY MESSAGES\r\n\t# ===========================\r\n\t'135/0' # Neighbor solicitation\r\n\t'136/0' # Neighbor advertisement\r\n\t'133/0' # Router solicitation\r\n\t'134/0' # Router advertisement\r\n\t'137/0' # Rredirect'\r\n\r\n\t# Multicast Listener Discovery messages\r\n\t# =====================================\r\n\t130 # ML queries (MLDv1 and MLDv2)\r\n\t131 # ML reports (MLDv1)\r\n\t132 # ML Done messages (MLDv1)\r\n\t143 # ML reports (MLDv2)\r\n\r\n\t138 # Router renumbering messages\r\n\r\n\t# NODE INFORMATION QUERIES\r\n\t# ========================\r\n\t139 # Node information queries\r\n\t140 # Node information replies\r\n)\r\n\r\nfor type in \"${types[@]}\"; do\r\n\tdrop --icmpv6-type \"${type}\"\r\ndone\r\n\r\n# MOBILE IPv6 MESSAGES\r\n# ====================\r\n\r\nfor inner_prefix in \"${inner_prefixes[@]}\"; do\r\n\tif (( home_agents_present == 1 )); then\r\n\t\t# incoming Home Agent address discovery request\r\n\t\taccept \\\r\n\t\t\t-d \"${inner_prefix}\" \\\r\n\t\t\t--icmpv6-type 144\r\n\r\n\t\t# outgoing Home Agent address discovery reply\r\n\t\taccept \\\r\n\t\t\t-s \"${inner_prefix}\" \\\r\n\t\t\t--icmpv6-type 145\r\n\r\n\t\t# incoming Mobile prefix solicitation\r\n\t\taccept \\\r\n\t\t\t-d \"${inner_prefix}\" \\\r\n\t\t\t--icmpv6-type 146\r\n\r\n\t\t# outgoing Mobile prefix advertisement\r\n\t\taccept \\\r\n\t\t\t-s \"${inner_prefix}\" \\\r\n\t\t\t--icmpv6-type 147\r\n\tfi\r\n\r\n\tif (( mobile_nodes_present == 1 )); then\r\n\t\t# outgoing Home Agent address discovery request\r\n\t\taccept \\\r\n\t\t\t-s \"${inner_prefix}\" \\\r\n\t\t\t--icmpv6-type 144\r\n\r\n\t\t# incoming Home Agent address discovery reply\r\n\t\taccept \\\r\n\t\t\t-d \"${inner_prefix}\" \\\r\n\t\t\t--icmpv6-type 145\r\n\r\n\t\t# outgoing Mobile prefix solicitation\r\n\t\taccept \\\r\n\t\t\t-s \"${inner_prefix}\" \\\r\n\t\t\t--icmpv6-type 146\r\n\r\n\t\t# incoming Mobile prefix advertisement\r\n\t\taccept \\\r\n\t\t\t-d \"${inner_prefix}\" \\\r\n\t\t\t--icmpv6-type 147\r\n\tfi\r\ndone\r\n\r\n# DROP EVERYTHING ELSE\r\n# ====================\r\n\r\ndrop\r\n",
    "notes": "- Fix ShellCheck SC2086 warnings\r\n- Code formatting: improve redability\r\n- Remove unnecessary export statements\r\n- Make uppercase variables lowercase constants\r\n- Make pingable_hosts and inner_prefixes arrays, so that for loops make sense\r\n- Use lowercase IPv6 addresses, as commonly accepted\r\n- Remove useless newlines at the beginning of if-checks and for-loops\r\n- Reduce code repetition by using state_args array\r\n- Combine separate loops in sections\r\n-- DESTINATION UNREACHABLE ERROR MESSAGES\r\n-- PACKET TOO BIG ERROR MESSAGES\r\n-- TIME EXCEEDED ERROR MESSAGES\r\n-- PARAMETER PROBLEM ERROR MESSAGES\r\n- Create filter, accept and drop functions to simplify code\r\n- Reduce code repetition by using type array\r\n- Simplify comments. Comments should explain why something is done, not what is done. If code needs explanation about what it does, it is not readable\r\n\r\nNOTE: The original does not seem to address type codes as advised and claimed in the comments. Additionally, there is one pointless loop in the example code. In my errata, I use numerical codes and types to address all this.\r\n\r\nPlease test the code thoroughly.\r\n\r\n=== Verifier note\r\n\r\nMany of the changes in this erratum are not about errors, but more a refresh, better readability, simplification, etc.  See https://mailarchive.ietf.org/arch/msg/v6ops/RnxLhcrAI4JmF8K7BRiW6xwTtkE/",
    "submit_date": "2024-05-03",
    "submitter_name": "William N.",
    "verifier_id": "184",
    "verifier_name": "Mohamed Boucadair",
    "update_date": "2025-06-01 22:05:55"
  },
  {
    "errata_id": "8139",
    "doc-id": "RFC4890",
    "errata_status_code": "Verified",
    "errata_type_code": "Technical",
    "section": "1",
    "orig_text": "         *  Ensuring that neighbors remain reachable using the same IP\r\n            and link layer addresses after initial discovery (Neighbor\r\n            Unreachability Discovery - NUD) and notifying neighbors of\r\n            changes to link layer addresses.  Uses NS and NA [RFC2461].\r\n",
    "correct_text": "         *  Ensuring that neighbors remain reachable using the same IP\r\n            and link layer addresses after initial discovery (Neighbor\r\n            Unreachability Detection - NUD) and notifying neighbors of\r\n            changes to link layer addresses.  Uses NS and NA [RFC2461].\r\n",
    "notes": "\"Discovery\" should be \"Detection\" as defined in RFC2461 § 7.3.\r\n\r\nWK: Doh!  Thank you for the clear errata report.",
    "submit_date": "2024-10-13",
    "submitter_name": "Nikolaos Chatzikonstantinou",
    "verifier_id": "155",
    "verifier_name": "Warren Kumari (Ops AD)",
    "update_date": "2024-10-14 08:17:29"
  }
]
